'use strict';

const AbstractCachingStrategy = require('./AbstractCachingStrategy');
const CACHE_LIMIT_KB = 10240; // 10 Megabyte cache limit per mimeType

class LeastRecentlyUsedStrategy extends AbstractCachingStrategy {


    /**
     * @inheritDoc
     */
    exceedsBoundary(cacheEntries) {
        let totalCacheSize = 0;
        for (const cacheEntry of cacheEntries.values()) {
            totalCacheSize += cacheEntry.size;
        }
        return totalCacheSize > CACHE_LIMIT_KB;
    }

    /**
     * @inheritDoc
     */
    invalidateItem(cacheEntries) {
        let oldestTime = Date.now();
        let oldestKey;
        for (const cacheEntry of Array.from(cacheEntries)) {
            const key = cacheEntry[0];
            const value = cacheEntry[1];
            if (value.time < oldestTime) {
                oldestKey = key;
                oldestTime = value.time;
            }
        }
        return oldestKey;
    }
}

module.exports = LeastRecentlyUsedStrategy;
