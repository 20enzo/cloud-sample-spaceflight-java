'use strict';

const Command = require('./Command');

/**
* The `next` callback to be called upon finish execution.
*
* @callback Next
* @param {?Error} error An error if there is one or null if not
*/

/**
 * Executes the error serialization.
 *
 * @extends Command
 */
class ErrorSerializingCommand extends Command {

    /**
    * Creates an instance of the ErrorSerializingCommand.
    *
    * @param {Context} context The current odata context instance
    */
    constructor(context) {
        super(context);
    }

    /**
     * Executes the registered error serializing function bound with the contract created from the
     * error content negotiation.
     *
     * @param {Next} next The next callback to be called on finish
     * @param {Error} error The error thrown
     */
    execute(next, error) {
        const context = this.getContext();
        const response = context.getResponse();
        const logger = context.getLogger();
        logger.path('Entering ErrorSerializingCommand.execute()...');

        if (response.isHeadersSent()) {
            logger.warning('Headers already sent');
            next();

        } else {
            logger.info('Start serializing payload...');

            const serialize = response.getContract().getSerializerFunction();
            serialize(error, response, (innerError, data) => {
                response.setBody(data);
                next(innerError);
            });
        }
    }
}

module.exports = ErrorSerializingCommand;
