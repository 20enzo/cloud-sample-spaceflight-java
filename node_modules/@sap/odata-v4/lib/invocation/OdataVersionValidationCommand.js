'use strict';

const Command = require('./Command');
const ModuleCache = require('../ModuleCache');

/**
* The `next` callback to be called upon finish execution.
*
* @callback Next
* @param {?Error} error An error if there is one or null if not
*/

/**
 * Executes the validation of the request headers.
 *
 * @extends Command
 */
class OdataVersionValidationCommand extends Command {

    /**
     * Creates an instance of the OdataVersionValidationCommand
     *
     * @param {Context} context The current odata context instance
     * @param {...string} headers The headers to validate
     */
    constructor(context, ...headers) {
        super(context);
        this._headers = headers;

        const RequestValidator = ModuleCache.lookup('RequestValidator');
        this._requestValidator = new RequestValidator().setLogger(context.getLogger());
    }

    /**
     * Executes the registered request header validator.
     * @param {Next} next The next callback to be called on finish
     */
    execute(next) {
        const context = this.getContext();
        const request = context.getRequest();
        const logger = context.getLogger();
        logger.path('Entering OdataVersionValidationCommand.execute()...');

        this._requestValidator.validateHeaders(context.getService().getOdataVersion(),
            request.getHeaders(),
            ...this._headers);

        next();
    }
}

module.exports = OdataVersionValidationCommand;
