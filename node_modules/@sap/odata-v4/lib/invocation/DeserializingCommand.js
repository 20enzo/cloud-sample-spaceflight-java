'use strict';

const Command = require('./Command');
const RepresentationKinds = require('../format/RepresentationKind').Kinds;
const DeserializationError = require('../errors/DeserializationError');

/**
 * The `next` callback to be called upon finish execution.
 *
 * @callback Next
 * @param {?Error} error An error if there is one or null if not
 */

/**
 * Parses the provided request body.
 *
 * @extends Command
 */
class DeserializingCommand extends Command {

    /**
     * Creates an instance of DeserializingCommand
     *
     * @param {Context} context The current odata context instance
     * @param {FormatManager} formatManager The current used format manager
     * @param {RequestContentNegotiator} negotiator The current used request payload negotiator
     */
    constructor(context, formatManager, negotiator) {
        super(context);
        this._formatManager = formatManager;
        this._negotiator = negotiator;
    }

    /**
     * Executes the request-body parsing. The content negotiation creates a `RequestContract` object
     * as a result with a payload deserializer facade inside. The contract object is
     * attached to the odata request instance. The deserializer facade is executed and the result body
     * is attached to the request. This command is executed only if the incoming request has a body
     * to parse as determined by the negotiation.
     *
     * @param {Next} next The next callback to be called on finish
     */
    execute(next) {
        const context = this.getContext();
        const request = context.getRequest();
        const logger = context.getLogger();
        logger.path('Entering DeserializingCommand.execute()...');

        logger.info('Start request payload parsing...');

        const contract = this._negotiator.negotiate(this._formatManager, request);

        const representationKind = contract.getRepresentationKind();
        if (representationKind === RepresentationKinds.NO_CONTENT) {
            next();
        } else {
            const deserializerFacade = contract.getDeserializerFunction();
            if (deserializerFacade) {
                deserializerFacade(request, (err, body) => {
                    request.setBody(body);
                    next(err);
                });
            } else {
                next(new DeserializationError(
                    'No payload deserializer available for resource kind '
                    + `'${representationKind}' and mime type '${contract.getContentTypeInfo().getMimeType()}'`));
            }
        }
    }
}

module.exports = DeserializingCommand;
