'use strict';

const Command = require('./Command');
const InternalServerError = require('../errors/InternalServerError');

/**
 * The `next` callback to be called upon finish execution.
 *
 * @callback Next
 * @param {?Error} error An error if there is one or null if not
 */

/**
 * Executes the setting of the statuscode in the odata response
 */
class SetStatuscodeCommand extends Command {

    /**
     *
     * @param {Context} context The current odata context instance
     * @param {Function} resolveFunction The function to resolve the statuscode with parameters context and error
     */
    constructor(context, resolveFunction) {
        super(context);
        this._resolveStatusCodeFunction = resolveFunction;
    }

    /**
     * @param {next} next The next callback to be called on finish
     * @param {?Error} error An error if there is one or null if not
     */
    execute(next, error) {
        const context = this.getContext();
        const logger = context.getLogger();

        logger.path('Entering SetStatuscodeCommand.execute()...');

        const statusCode = this._resolveStatusCodeFunction(context, error);

        if (statusCode) {
            const response = context.getResponse();
            const options = error || context.getRequest().getContract().isDebug() ? { overwrite: true } : undefined;

            logger.debug('Set response status code: ', statusCode, ', options: ', options);
            response.setStatusCode(statusCode, options);

            next();
        } else {
            next(new InternalServerError('Invalid state: status code is not defined'));
        }
    }
}

module.exports = SetStatuscodeCommand;
