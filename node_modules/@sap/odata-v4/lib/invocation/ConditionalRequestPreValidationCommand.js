'use strict';

const Command = require('./Command');
const ConditionalRequestValidator = require('../validator/ConditionalRequestValidator');
const Methods = require('../http/HttpMethod').Methods;
const ResourceKinds = require('../uri/UriResource').ResourceKind;
const StateMachine = require('../utils/StateMachine');

/**
* The `next` callback to be called upon finish execution.
*
* @callback Next
* @param {?Error} error An error if there is one or null if not
*/

/**
 * Executes the validation of the request conditional request.
 */
class ConditionalRequestValidationCommand extends Command {

    constructor(context) {
        super(context);
    }

    execute(next) {
        const logger = this.getContext().getLogger();

        logger.path('Entering ConditionalRequestPreValidationCommand.execute()...');

        const request = this.getContext().getRequest();
        const uriInfo = request.getUriInfo();
        const isConcurrentResource = (request.getConcurrentResource() !== null);

        logger.info('Requested resource is concurrent: ', isConcurrentResource);

        const ifNoneMatch = request.getHeader('if-none-match');
        const ifMatch = request.getHeader('if-match');
        const method = request.getMethod();
        const isValidOperation = method === Methods.GET
            || method === Methods.PUT || method === Methods.PATCH
            || method === Methods.DELETE
            || method === Methods.POST && uriInfo.getLastSegment().getKind() === ResourceKinds.REF_COLLECTION
            || uriInfo.getLastSegment().getKind() === ResourceKinds.BOUND_ACTION;

        if (isValidOperation && (ifMatch != null || ifNoneMatch != null || isConcurrentResource)) {

            logger.info('Request is conditional: true');
            logger.debug(`Header If-Match: '${ifMatch}', If-None-Match: '${ifNoneMatch}'`);

            const stateMachine = new StateMachine(
                ConditionalRequestValidator.createStateMachineContext(logger), logger
            ).on('error', next).on('Final', next);

            new ConditionalRequestValidator(stateMachine)
                .startWith(ConditionalRequestValidator.STATES.INITIAL)
                .validate({ ifMatch, ifNoneMatch, method, isConcurrentResource });

            logger.debug('Conditional request processing state history (after pre validation): ',
                stateMachine.getHistory());

        } else {
            next();
        }
    }
}

module.exports = ConditionalRequestValidationCommand;
