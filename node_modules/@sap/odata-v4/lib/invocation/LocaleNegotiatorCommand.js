'use strict';

const Command = require('./Command');
const RepresentationKind = require('../format/RepresentationKind').Kinds;
const Components = require('../core/ComponentManager').Components;

/**
* The `next` callback to be called upon finish execution.
*
* @callback Next
* @param {?Error} error An error if there is one or null if not
*/

/**
 * Calls the application in order to negotiate the Locale of the response
 *
 * @extends Command
 */
class LocaleNegotiatorCommand extends Command {

    /**
     * Creates an instance of ContentNegotiatorCommand
     *
     * @param {Context} context The current odata context instance
     */
    constructor(context) {
        super(context);
    }

    /**
     * Executes the content negotiation. The content negotiation creates a `ResponseContract` object
     * as a result with all necessary content negotiation information. The contract object is
     * attached to the odata response instance.
     *
     * @param {Next} next The next callback to be called on finish
     */
    execute(next) {
        const context = this.getContext();
        const logger = context.getLogger();
        logger.path('Entering LocaleNegotiatorCommand.execute()...');

        if (context.getResponse().getContract().getRepresentationKind() !== RepresentationKind.METADATA) return next();

        const localeNegotiationComponent = context.getService().getComponentManager()
            .getComponent(Components.LOCALE_NEGOTIATOR);

        if (!localeNegotiationComponent) return next();

        localeNegotiationComponent(context.getRequest(), context.getResponse(), (error, localeInfo) => {
            if (error) {
                return next(error);
            }

            if (localeInfo) {
                context.getResponse().getContract().setLocale(localeInfo.value);
                logger.info('Response Contract Locale: ', localeInfo.value);
            }

            return next();
        });

        return undefined;
    }
}

module.exports = LocaleNegotiatorCommand;
