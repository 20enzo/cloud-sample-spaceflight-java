'use strict';

const Command = require('./Command');

/**
* The `next` callback to be called upon finish execution.
*
* @callback Next
* @param {?Error} error An error if there is one or null if not
*/

/**
 * Negotiates the response content type for the provided request.
 *
 * @extends Command
 */
class ContentNegotiatorCommand extends Command {

    /**
     * Creates an instance of ContentNegotiatorCommand
     *
     * @param {Context} context The current odata context instance
     * @param {FormatManager} formatManager The current instance of format manager
     * @param {ResponseContentNegotiator} contentNegotiator The current instance of ResponseContentNegotiator
     */
    constructor(context, formatManager, contentNegotiator) {
        super(context);
        this._formatManager = formatManager;

        /**
         * @type {ResponseContentNegotiator}
         * @private
         */
        this._negotiator = contentNegotiator;
    }

    /**
     * Executes the content negotiation. The content negotiation creates a `ResponseContract` object
     * as a result with all necessary content negotiation information. The contract object is
     * attached to the odata response instance.
     *
     * @param {Next} next The next callback to be called on finish
     */
    execute(next) {
        const context = this.getContext();
        const logger = context.getLogger();
        logger.path('Entering ContentNegotiatorCommand.execute()...');

        const request = context.getRequest();
        const contract = this._negotiator.negotiate(this._formatManager, request, request.getUriInfo());
        logger.debug('Response contract contentTypeInfo: ', contract.getContentTypeInfo());

        context.getResponse().setContract(contract);

        next();
    }

    /**
     * Returns the current content negotiator instance.
     *
     * @returns {ContentNegotiator} The current instance of the negotiator
     * @protected
     */
    getNegotiator() {
        return this._negotiator;
    }

    /**
     * Returns the current instance of the format manager.
     *
     * @returns {FormatManager} The current instance of the format manager
     * @protected
     */
    getFormatManager() {
        return this._formatManager;
    }
}

module.exports = ContentNegotiatorCommand;
