'use strict';

const EdmAnnotation = require('./EdmAnnotation');
const EdmTypeFactory = require('./EdmTypeFactory');
const validateThat = require('../validator/ParameterValidator').validateThat;

/**
 * * <a href="./../ODataSpecification/odata-v4.0-errata03-os/complete/part3-csdl/odata-v4.0-errata03-os-part3-csdl-complete.html#_Toc453752591">
 *  OData CSDL # 12.4 Element edm:Parameter
 * </a>
 * @hideconstructor
 */
class EdmParameter {

    /**
     * Constructor
     *
     * @param {Edm} edm The edm itself
     * @param {CsdlParameter} parameter Parameter information
     */
    constructor(edm, parameter) {
        validateThat('edm', edm).truthy();
        validateThat('parameter', parameter).truthy();

        this._edm = edm;
        this._name = parameter.name;

        /**
         * @type {CsdlParameter}
         * @private
         */
        this._parameter = parameter;

        /**
         * @type {EdmType}
         * @private
         */
        this._type = null;

        /**
         * @type {EdmAnnotation[]}
         * @private
         */
        this._annotations = null;
    }


    /**
     * Returns the name
     *
     * @returns {string}
     */
    getName() {
        return this._name;
    }


    /**
     * Returns true if the parameter is a collection. Otherwise false
     *
     * @returns {boolean}
     */
    isCollection() {
        return this._parameter.isCollection;
    }


    /**
     * Returns true if the parameter is nullable. Otherwise false
     *
     * @returns {boolean}
     */
    isNullable() {
        return this._parameter.isNullable;
    }

    /**
     * Returns the max length
     *
     * @returns {number|string}
     */
    getMaxLength() {
        return this._parameter.maxLength;
    }

    /**
     * Returns the precision
     *
     * @returns {number|string}
     */
    getPrecision() {
        return this._parameter.precision;
    }

    /**
     * Returns the scale
     *
     * @returns {number}
     */
    getScale() {
        return this._parameter.scale;
    }

    /**
     * Returns the srid
     *
     * @returns {string}
     */
    getSrid() {
        return this._parameter.srid;
    }

    /**
     * Returns the parameter type.
     *
     * @returns {EdmType}
     */
    getType() {
        if (!this._type) {
            this._type = EdmTypeFactory.createTypeFromFQN(this._edm, this._parameter.type);
        }
        return this._type;
    }

    /**
     * Returns the annotations for this parameter.
     *
     * @returns {EdmAnnotation[]}
     */
    getAnnotations() {
        if (!this._annotations) {
            this._annotations = this._parameter.annotations.map(item => new EdmAnnotation(this._edm, item));
        }
        return this._annotations;
    }
}

module.exports = EdmParameter;
