'use strict';

const EdmAnnotation = require('./EdmAnnotation');
const EdmTypeKind = require('./EdmType').TypeKind;
const EdmTypeFactory = require('./EdmTypeFactory');
const validateThat = require('../validator/ParameterValidator').validateThat;
const FeatureSupport = require('../FeatureSupport');

/**
 * * * <a href="./../ODataSpecification/odata-v4.0-errata03-os/complete/part3-csdl/odata-v4.0-errata03-os-part3-csdl-complete.html#_Toc453752525">
 *     OData CSDL # 6.1 Element edm:Property
 * </a>
 * @hideconstructor
 */
class EdmProperty {

    /**
     * Constructor
     * @param {Edm} edm The edm itself
     * @param {CsdlProperty} property
     */
    constructor(edm, property) {
        validateThat('edm', edm).truthy();
        validateThat('property', property).truthy();

        if (!property.unicode) {
            FeatureSupport.failUnsupported(FeatureSupport.features.AttributeUnicode);
        }

        if (property.srid !== undefined) {
            FeatureSupport.failUnsupported(FeatureSupport.features.AttributeSRID);
        }

        /**
         * @type {Edm}
         * @private
         */
        this._edm = edm;

        /**
         * @type {string}
         * @private
         */
        this._name = property.name;
        /**
         *
         * @type {CsdlProperty}
         * @private
         */
        this._property = property;

        /**
         * @type {EdmType}
         * @private
         */
        this._propertyType = null;

        /**
         * @type {EdmAnnotation[]}
         * @private
         */
        this._annotations = null;
    }


    /**
     * Returns the name
     *
     * @returns {string}
     */
    getName() {
        return this._name;
    }

    /**
     * Returns the property type.
     *
     * @returns {EdmType}
     */
    getType() {
        if (!this._propertyType) {
            this._propertyType = EdmTypeFactory.createTypeFromFQN(this._edm, this._property.type);
        }
        return this._propertyType;
    }

    /**
     * Returns true if the property is a collection. Otherwise false
     *
     * @returns {boolean}
     */
    isCollection() {
        return this._property.isCollection;
    }

    /**
     * Returns true if the property is nullable. Otherwise false
     *
     * @returns {boolean}
     */
    isNullable() {
        return this._property.isNullable;
    }

    /**
     * Returns the max length
     *
     * @returns {?(number|string)}
     */
    getMaxLength() {
        return this._property.maxLength;
    }

    /**
     * Returns the precision
     *
     * @returns {?number}
     */
    getPrecision() {
        return this._property.precision;
    }

    /**
     * Returns the scale
     *
     * @returns {?(number|string)}
     */
    getScale() {
        return this._property.scale;
    }

    /**
     * Returns the srid
     *
     * @returns {?string}
     */
    getSrid() {
        return this._property.srid;
    }

    /**
     * Returns true if the property value is unicode encoded. Otherwise false
     *
     * @returns {boolean}
     */
    isUnicode() {
        return this._property.unicode;
    }

    /**
     * Return the default value of the property
     * @returns {*}
     */
    getDefaultValue() {
        return this._property.defaultValue;
    }

    /**
     * Returns true if the parameter is primitive. Otherwise false
     *
     * @returns {boolean}
     */
    isPrimitive() {
        return this.getType().getKind() === EdmTypeKind.PRIMITIVE;
    }

    /**
     * Returns the annotations for this property.
     *
     * @returns {EdmAnnotation[]}
     */
    getAnnotations() {
        if (!this._annotations) {
            this._annotations = this._property.annotations.map(item => new EdmAnnotation(this._edm, item));
        }
        return this._annotations;
    }
}

module.exports = EdmProperty;
