'use strict';

const Edm = require('./Edm');
const EdmAnnotation = require('./EdmAnnotation');
const EdmTypeKind = require('./EdmType').TypeKind;
const EdmTypeFactory = require('./EdmTypeFactory');
const validateThat = require('../validator/ParameterValidator').validateThat;

/**
 * <a href="./../ODataSpecification/odata-v4.0-errata03-os/complete/part3-csdl/odata-v4.0-errata03-os-part3-csdl-complete.html#_Toc453752620">
 *     OData CSDL # 14.1 Element edm:Term
 * </a>
 * @hideconstructor
 */
class EdmTerm {

    /**
     * Constructor
     * @param {Edm} edm The edm itself
     * @param {CsdlTerm} term
     */
    constructor(edm, term) {
        validateThat('edm', edm).truthy().instanceOf(Edm);
        validateThat('term', term).truthy().instanceOf(Object);

        this._edm = edm;

        /**
         * @type {string}
         * @private
         */
        this._name = term.name;

        /**
         *
         * @type {CsdlTerm}
         * @private
         */
        this._term = term;

        /**
         * @type {EdmType}
         * @private
         */
        this._termType = null;

        /**
         * @type {EdmType}
         * @private
         */
        this._baseTerm = null;

        /**
         * @type {EdmAnnotation[]}
         * @private
         */
        this._annotations = null;
    }


    /**
     * Returns the name
     *
     * @returns {string}
     */
    getName() {
        return this._name;
    }

    /**
     * Returns the term type
     *
     * @returns {EdmType}
     */
    getType() {
        if (!this._termType) {
            this._termType = EdmTypeFactory.createTypeFromFQN(this._edm, this._term.type);
        }
        return this._termType;
    }

    /**
     * Returns the CSDL element names to which this term can be applied
     *
     * @returns {string[]}
     */
    getAppliesTo() {
        return this._term.appliesTo;
    }

    /**
     * Returns the base term
     *
     * @returns {EdmTerm}
     */
    getBaseTerm() {
        if (this._baseTerm) return this._baseTerm;

        if (!this._term.baseTerm) return null;

        this._baseTerm = this._edm.getTerm(this._term.baseTerm);
        return this._baseTerm;
    }

    /**
     * Return the default value of the term.
     * @returns {*}
     */
    getDefaultValue() {
        return this._term.defaultValue;
    }

    /**
     * Returns true if the term is a collection. Otherwise false
     *
     * @returns {boolean}
     */
    isCollection() {
        return this._term.isCollection;
    }

    /**
     * Returns true if the term is nullable. Otherwise false
     *
     * @returns {boolean}
     */
    isNullable() {
        return this._term.isNullable;
    }

    /**
     * Returns the max length
     *
     * @returns {number|string}
     */
    getMaxLength() {
        return this._term.maxLength;
    }

    /**
     * Returns the precision
     *
     * @returns {number|string}
     */
    getPrecision() {
        return this._term.precision;
    }

    /**
     * Returns the scale
     *
     * @returns {number}
     */
    getScale() {
        return this._term.scale;
    }

    /**
     * Returns the srid
     *
     * @returns {string}
     */
    getSrid() {
        return this._term.srid;
    }

    /**
     * Returns true if the term is primitive. Otherwise false
     *
     * @returns {boolean}
     */
    isPrimitive() {
        return this.getType().getKind() === EdmTypeKind.PRIMITIVE;
    }

    /**
     * Returns the annotations for this object
     *
     * @returns {EdmAnnotation[]}
     */
    getAnnotations() {
        if (!this._annotations) {
            this._annotations = this._term.annotations.map(item => new EdmAnnotation(this._edm, item));
        }
        return this._annotations;
    }
}

module.exports = EdmTerm;
