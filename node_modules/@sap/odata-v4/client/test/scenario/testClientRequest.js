/* eslint-disable no-param-reassign */
const http = require('http');
const assert = require('assert');
const ClientRequest = require('../../lib/ClientRequest');
const TestUtils = require('../../../test/TestUtils');
const BufferedWritter = require('./../../../lib/utils/BufferedWriter');
const UriBuilder = require('./../../lib/uri/builder/UriBuilder');

const esAllPrim42V2 = require('../resources/V2_ESAllPrim_42.json');
const esTwoPrimV2 = require('../resources/V2_ESTwoPrim.json');
const esCompComp = require('../resources/ESCompComp.json');

const edm = TestUtils.createEdm();

const gwSamplewServiceEdm = {
    $Version: '2.0',
    $EntityContainer: 'test.Container',
    test: {
        BusinessPartner: {
            $Kind: 'EntityType',
            CompanyName: {
                $Nullable: false
            },
            BusinessPartnerID: {
                $Nullable: false
            },
        },
        Container: {
            BusinessPartnerSet: {
                $Kind: 'EntitySet',
                $Type: 'test.BusinessPartner'
            }
        }
    }
};

const esAllPrimEntity = {
    PropertyInt16: 32767,
    PropertyString: 'string',
    PropertyBoolean: true,
    PropertyByte: 255,
    PropertySByte: 127,
    PropertyInt32: 2147483647,
    PropertyInt64: '9223372036854775807',
    PropertySingle: 17900000000,
    PropertyDouble: -17900000000,
    PropertyDecimal: '34',
    PropertyBinary: 'ASNFZ4mrze8=',
    PropertyDateTimeOffset: '2018-12-12T12:12:12Z',
    PropertyGuid: '01234567-89ab-cdef-0123-456789abcdef',
    PropertyTimeOfDay: '12:12:12',
};

const createServer = (serverCb, reqCb) => {
    const server = http.createServer((req, res) => {
        req.pipe(new BufferedWritter()).on('result', (body) => {
            res.setHeader('content-type', 'application/json');
            res.setHeader('Odata-Version', '2.0');
            res.setHeader('DataServiceVersion', '2.0');
            res.statusCode = 200;
            try {
                serverCb(req, res, body);
            } catch (error) {
                res.statusCode = 500;
                res.end(JSON.stringify(error, null, 2));
            }
        });
    });
    server.listen(() => {
        const port = server.address().port;
        try {
            reqCb(port, server);
        } catch (error) {
            server.close();
        }
    });
    return server;
};

describe(__filename, () => {

    TestUtils.temporaryAllowUnsupportedFeatures();

    describe('ClientRequest', () => {

        describe('Create ClientRequest', () => {
            it('should throw an error if url is not a UriBuilder', () => {
                assert.throws(() => {
                    new ClientRequest({}).post();
                }, /Currently only using an UriBuilder instance is allowed to define the 'url' property/);
            });
        });

        describe('.options()', () => {

            it('should OPTIONS /ESAllPrim', done => {

                createServer(
                    (req, res) => {
                        assert.equal(req.method, 'OPTIONS');
                        res.statusCode = 204;
                        res.end();
                    },
                    (port, server) => {

                        new ClientRequest({
                            serviceRootUrl: `http://localhost:${port}/`,
                            url: new UriBuilder(edm).v2().entitySet('ESAllPrim'),
                            OdataVersion: '2.0',
                            edm
                        })
                            .on('error', (error) => {
                                server.close(() => {
                                    done(error);
                                });
                            })
                            .on('response', (response) => {
                                try {
                                    assert.equal(response.getStatusCode(), 204);
                                    const body = response.getBody();
                                    assert.equal(body, null);
                                    done();
                                } catch (error) {
                                    done(error);
                                } finally {
                                    server.close();
                                }
                            })
                            .options();
                    }
                );

            });

        });

        describe('.head()', () => {

            it('should HEAD /ESAllPrim', done => {

                createServer(
                    (req, res) => {
                        assert.equal(req.method, 'HEAD');
                        res.statusCode = 204;
                        return res.end();
                    },
                    (port, server) => {

                        new ClientRequest({
                            serviceRootUrl: `http://localhost:${port}/`,
                            url: new UriBuilder(edm).v2().entitySet('ESAllPrim'),
                            OdataVersion: '2.0',
                            edm
                        })
                            .on('error', (error) => {
                                server.close(() => {
                                    done(error);
                                });
                            })
                            .on('response', (response) => {
                                try {
                                    assert.equal(response.getStatusCode(), 204);
                                    const body = response.getBody();
                                    assert.equal(body, null);
                                    done();
                                } catch (error) {
                                    done(error);
                                } finally {
                                    server.close();
                                }
                            })
                            .head();
                    }
                );

            });
        });

        describe('.delete()', () => {

            it('should DELETE /ESAllPrim(42)', done => {

                createServer(
                    (req, res) => {
                        assert.equal(req.method, 'DELETE');
                        res.statusCode = 204;
                        return res.end();
                    },
                    (port, server) => {

                        new ClientRequest({
                            serviceRootUrl: `http://localhost:${port}/`,
                            url: new UriBuilder(edm).v2().entitySet('ESAllPrim').key(42),
                            OdataVersion: '2.0',
                            edm
                        })
                            .on('error', (error) => {
                                server.close(() => {
                                    done(error);
                                });
                            })
                            .on('response', (response) => {
                                try {
                                    assert.equal(response.getStatusCode(), 204);
                                    const body = response.getBody();
                                    assert.equal(body, null);
                                    done();
                                } catch (error) {
                                    done(error);
                                } finally {
                                    server.close();
                                }
                            })
                            .delete();
                    });
            });
        });

        describe('.patch(data)', () => {

            it('should PATCH /ESAllPrim(42)', done => {

                createServer(
                    (req, res, body) => {
                        assert.equal(req.method, 'PATCH');
                        JSON.parse(body);
                        res.statusCode = 200;
                        return res.end(JSON.stringify(esAllPrim42V2, null, 2));
                    },
                    (port, server) => {

                        new ClientRequest({
                            serviceRootUrl: `http://localhost:${port}/`,
                            url: new UriBuilder(edm).v2().entitySet('ESAllPrim').key(42),
                            OdataVersion: '2.0',
                            edm
                        })
                            .on('error', (error) => {
                                server.close(() => {
                                    done(error);
                                });
                            })
                            .on('response', (response) => {
                                try {
                                    assert.equal(response.getStatusCode(), 200);
                                    const body = response.getBody();
                                    assert.equal(body.value.PropertyString, 'string');
                                    assert.equal(body.value.PropertyInt16, 32767);
                                    done();
                                } catch (error) {
                                    done(error);
                                } finally {
                                    server.close();
                                }
                            })
                            .patch({ value: esAllPrimEntity });
                    });
            });
        });

        describe('.put(data)', () => {

            it('should PUT /ESAllPrim(42)/PropertyString', done => {

                createServer(
                    (req, res) => {
                        assert.equal(req.headers['content-type'], 'application/json');
                        assert.equal(req.method, 'PUT');
                        return res.end(JSON.stringify(
                            { d: { PropertyString: 'Any string' } }
                            , null, 2
                        ));
                    },
                    (port, server) => {

                        new ClientRequest({
                            serviceRootUrl: `http://localhost:${port}/`,
                            url: new UriBuilder(edm).v2()
                                .entitySet('ESAllPrim').key(42).primitiveProperty('PropertyString'),
                            OdataVersion: '2.0',
                            edm
                        })
                            .on('error', (error) => {
                                server.close(() => {
                                    done(error);
                                });
                            })
                            .on('response', (response) => {
                                try {
                                    assert.equal(response.getStatusCode(), 200);
                                    assert.equal(response.getHeader('content-type'), 'application/json');
                                    const body = response.getBody();
                                    assert.deepEqual(body, { value: 'Any string' });
                                    done();
                                } catch (error) {
                                    done(error);
                                } finally {
                                    server.close();
                                }
                            })
                            .put({ value: 'Any string' });
                    });

            });

            it('should PUT /ESAllPrim(42)/PropertyString/$value', done => {

                createServer(
                    (req, res, body) => {
                        assert.equal(req.headers['content-type'], 'text/plain');
                        assert.equal(req.method, 'PUT');
                        assert.equal(body, 'Any string value');
                        res.setHeader('content-type', 'text/plain');
                        return res.end('Any string value');
                    },
                    (port, server) => {

                        new ClientRequest({
                            serviceRootUrl: `http://localhost:${port}/`,
                            url: new UriBuilder(edm).v2().entitySet('ESAllPrim').key(42)
                                .primitiveProperty('PropertyString').value(),
                            Accept: 'text/plain',
                            ContentType: 'text/plain',
                            OdataVersion: '2.0',
                            edm
                        })
                            .on('error', (error) => {
                                server.close(() => {
                                    done(error);
                                });
                            })
                            .on('response', (response) => {
                                try {
                                    assert.equal(response.getStatusCode(), 200);
                                    assert.equal(response.getHeader('content-type'), 'text/plain');
                                    const body = response.getBody();
                                    assert.equal(body, 'Any string value');
                                    done();
                                } catch (error) {
                                    done(error);
                                } finally {
                                    server.close();
                                }
                            })
                            .put('Any string value');
                    });

            });

            it('should PUT /ESCompComp(42)/PropertComp/PropertComp', done => {

                const payload = { value: esCompComp[0].PropertyComp };

                createServer(
                    (req, res, body) => {
                        assert.equal(req.method, 'PUT');
                        JSON.parse(body.toString());
                        return res.end(JSON.stringify(
                            { d: { PropertyComp: esCompComp[0].PropertyComp } }
                            , null, 2
                        ));
                    },
                    (port, server) => {

                        new ClientRequest({
                            serviceRootUrl: `http://localhost:${port}/`,
                            url: new UriBuilder(edm).v2().entitySet('ESCompComp').key(42)
                                .complexProperty('PropertyComp'),
                            OdataVersion: '2.0',
                            edm
                        })
                            .on('error', (error) => {
                                server.close(() => {
                                    done(error);
                                });
                            })
                            .on('response', (response) => {
                                try {
                                    assert.equal(response.getStatusCode(), 200);
                                    const body = response.getBody();
                                    assert.deepEqual(body, payload);
                                    done();
                                } catch (error) {
                                    done(error);
                                } finally {
                                    server.close();
                                }
                            })
                            .put(payload);
                    });

            });

            it('should PUT /ESAllPrim(42)', done => {

                createServer(
                    (req, res, body) => {
                        assert.equal(req.method, 'PUT');
                        JSON.parse(body.toString());
                        return res.end(JSON.stringify(esAllPrim42V2, null, 2));
                    },
                    (port, server) => {

                        new ClientRequest({
                            serviceRootUrl: `http://localhost:${port}/`,
                            url: new UriBuilder(edm).v2().entitySet('ESAllPrim').key(42),
                            OdataVersion: '2.0',
                            edm
                        })
                            .on('error', (error) => {
                                server.close(() => {
                                    done(error);
                                });
                            })
                            .on('response', (response) => {
                                try {
                                    assert.equal(response.getStatusCode(), 200);
                                    const body = response.getBody();
                                    assert.equal(body.value.PropertyString, 'string');
                                    assert.equal(body.value.PropertyInt16, 32767);
                                    done();
                                } catch (error) {
                                    done(error);
                                } finally {
                                    server.close();
                                }
                            })
                            .put({ value: esAllPrimEntity });
                    });

            });
        });

        describe('.post(data)', () => {

            it('should POST /ESAllPrim', done => {

                const url = '/ESAllPrim';

                createServer(
                    (req, res, body) => {
                        assert.equal(req.method, 'POST');
                        assert.equal(req.url, url);
                        JSON.parse(body.toString());
                        return res.end(JSON.stringify(esAllPrim42V2, null, 2));
                    },
                    (port, server) => {

                        new ClientRequest({
                            serviceRootUrl: `http://localhost:${port}/`,
                            url: new UriBuilder(edm).v2().entitySet('ESAllPrim'),
                            OdataVersion: '2.0',
                            ContentType: 'application/json',
                            edm
                        })
                            .on('error', (error) => {
                                server.close(() => {
                                    done(error);
                                });
                            })
                            .on('response', (response) => {
                                try {
                                    assert.equal(response.getStatusCode(), 200);
                                    const body = response.getBody();
                                    assert.equal(body.value.PropertyString, 'string');
                                    assert.equal(body.value.PropertyInt16, 32767);
                                    done();
                                } catch (error) {
                                    done(error);
                                } finally {
                                    server.close();
                                }
                            })
                            .post({ value: esAllPrimEntity });
                    });
            });

            it('should throw error with Odata-Version != 2.0', done => {

                new ClientRequest({
                    serviceRootUrl: 'http://localhost:1234/',
                    url: new UriBuilder(edm).v2().entitySet('ESAllPrim'),
                    OdataVersion: '5.0',
                    ContentType: 'application/json',
                    edm
                })
                    .on('error', (error) => {
                        try {
                            assert.equal(error.message, "Header value '5.0' for 'DataServiceVersion' is not supported");
                            done();
                        } catch (tryError) {
                            done(tryError);
                        }
                    })
                    .on('response', () => {
                        done(new Error('Should not reach this code'));
                    })
                    .post(esAllPrimEntity);
            });

            it('should throw error with wrong Content-Type', done => {

                new ClientRequest({
                    serviceRootUrl: 'http://localhost:1234/',
                    url: new UriBuilder(edm).v2().entitySet('ESAllPrim'),
                    OdataVersion: '2.0',
                    ContentType: 'any/wrong',
                    edm
                })
                    .on('error', (error) => {
                        try {
                            assert.equal(error.message, "Serialize Content-Type of 'any/wrong' is not supported");
                            done();
                        } catch (tryError) {
                            done(tryError);
                        }
                    })
                    .on('response', () => {
                        done(new Error('Should not reach this code'));
                    })
                    .post(esAllPrimEntity);
            });
        });

        describe('.get()', () => {

            it('should GET /$metadata', done => {

                const url = '/$metadata';

                createServer(
                    (req, res) => {
                        assert.equal(req.method, 'GET');
                        assert.equal(req.url, url);
                        res.setHeader('content-type', 'application/xml');
                        return res.end('<edmx>...</edmx>');
                    },
                    (port, server) => {

                        new ClientRequest({
                            serviceRootUrl: `http://localhost:${port}/`,
                            url: new UriBuilder(edm).v2().metadata(),
                            OdataVersion: '2.0',
                            edm
                        })
                            .on('error', (error) => {
                                server.close(() => {
                                    done(error);
                                });
                            })
                            .on('response', (response) => {
                                try {
                                    assert.equal(response.getHeader('content-type'), 'application/xml');
                                    assert.equal(response.getStatusCode(), 200);
                                    const body = response.getBody();
                                    assert.equal(body, '<edmx>...</edmx>');
                                    done();
                                } catch (error) {
                                    done(error);
                                } finally {
                                    server.close();
                                }
                            })
                            .get();
                    });
            });

            it('should GET /ESAllPrim(1)?$expand=NavPropertyETTwoPrimMany', done => {

                const serverPayload = {
                    d: {
                        PropertyString: 'Abc',
                        NavPropertyETTwoPrimMany: { results: [{ PropertyString: 'def' }, { PropertyString: 'ghi' }] }
                    }
                };

                const expectedPayload = {
                    value: {
                        PropertyString: 'Abc',
                        NavPropertyETTwoPrimMany: [{ PropertyString: 'def' }, { PropertyString: 'ghi' }]
                    }
                };

                createServer(
                    (req, res) => {
                        assert.equal(req.method, 'GET');
                        return res.end(JSON.stringify(serverPayload, null, 2));
                    },
                    (port, server) => {

                        new ClientRequest({
                            serviceRootUrl: `http://localhost:${port}/`,
                            url: new UriBuilder(edm).v2()
                                .entitySet('ESAllPrim').key(1)
                                .expand('NavPropertyETTwoPrimMany'),
                            OdataVersion: '2.0',
                            edm
                        })
                            .on('error', (error) => {
                                server.close(() => {
                                    done(error);
                                });
                            })
                            .on('response', (response) => {
                                try {
                                    const body = response.getBody();
                                    assert.deepStrictEqual(body, expectedPayload);
                                    assert.equal(response.getStatusCode(), 200);
                                    done();
                                } catch (error) {
                                    done(error);
                                } finally {
                                    server.close();
                                }
                            })
                            .get();
                    });
            });

            it('should GET /ESCompComp(1)/PropertyComp', done => {

                const url = '/ESCompComp(1)/PropertyComp';

                createServer(
                    (req, res) => {
                        assert.equal(req.method, 'GET');
                        assert.equal(req.url, url);
                        return res.end(JSON.stringify(
                            {
                                d: { PropertyComp: { PropertyComp: { PropertyInt16: 99, PropertyString: 'abc' } } }
                            }
                            , null, 2
                        ));
                    },
                    (port, server) => {

                        new ClientRequest({
                            serviceRootUrl: `http://localhost:${port}/`,
                            url: new UriBuilder(edm).v2()
                                .entitySet('ESCompComp').key(1)
                                .complexProperty('PropertyComp'),
                            OdataVersion: '2.0',
                            edm
                        })
                            .on('error', (error) => {
                                server.close(() => {
                                    done(error);
                                });
                            })
                            .on('response', (response) => {
                                try {
                                    assert.equal(response.getStatusCode(), 200);
                                    const body = response.getBody();
                                    assert.deepStrictEqual(body, {
                                        value: {
                                            PropertyComp: {
                                                PropertyInt16: 99,
                                                PropertyString: 'abc'
                                            }
                                        }
                                    });
                                    done();
                                } catch (error) {
                                    done(error);
                                } finally {
                                    server.close();
                                }
                            })
                            .get();
                    });
            });

            it('should GET /ESAllPrim(42)/PropertyInt16/$value', done => {

                const url = '/ESAllPrim(42)/PropertyInt16/$value';

                createServer(
                    (req, res) => {
                        assert.equal(req.method, 'GET');
                        assert.equal(req.url, url);
                        res.setHeader('content-type', 'text/plain');
                        return res.end(JSON.stringify(99, null, 2));
                    },
                    (port, server) => {

                        new ClientRequest({
                            serviceRootUrl: `http://localhost:${port}/`,
                            url: new UriBuilder(edm).v2()
                                .entitySet('ESAllPrim').key(42)
                                .primitiveProperty('PropertyInt16').value(),
                            OdataVersion: '2.0',
                            edm
                        })
                            .on('error', (error) => {
                                server.close(() => {
                                    done(error);
                                });
                            })
                            .on('response', (response) => {
                                try {
                                    assert.equal(response.getStatusCode(), 200);
                                    const body = response.getBody();
                                    assert.equal(body, 99);
                                    done();
                                } catch (error) {
                                    done(error);
                                } finally {
                                    server.close();
                                }
                            })
                            .get();
                    });
            });

            it('should GET /ESAllPrim(42)/PropertyInt16', done => {

                const url = '/ESAllPrim(42)/PropertyInt16';

                createServer(
                    (req, res) => {
                        assert.equal(req.method, 'GET');
                        assert.equal(req.url, url);
                        return res.end(JSON.stringify({ PropertyInt16: 99 }, null, 2));
                    },
                    (port, server) => {

                        new ClientRequest({
                            serviceRootUrl: `http://localhost:${port}/`,
                            url: new UriBuilder(edm).v2()
                                .entitySet('ESAllPrim').key(42)
                                .primitiveProperty('PropertyInt16'),
                            OdataVersion: '2.0',
                            edm
                        })
                            .on('error', (error) => {
                                server.close(() => {
                                    done(error);
                                });
                            })
                            .on('response', (response) => {
                                try {
                                    assert.equal(response.getStatusCode(), 200);
                                    const body = response.getBody();
                                    assert.deepEqual(body, { value: 99 });
                                    done();
                                } catch (error) {
                                    done(error);
                                } finally {
                                    server.close();
                                }
                            })
                            .get();
                    });
            });

            it('should GET /ESAllPrim(42)', done => {

                const url = '/ESAllPrim(42)';

                createServer(
                    (req, res) => {
                        assert.equal(req.method, 'GET');
                        assert.equal(req.url, url);
                        return res.end(JSON.stringify(esAllPrim42V2, null, 2));
                    },
                    (port, server) => {

                        new ClientRequest({
                            serviceRootUrl: `http://localhost:${port}/`,
                            url: new UriBuilder(edm).v2()
                                .entitySet('ESAllPrim').key(42),
                            OdataVersion: '2.0',
                            edm
                        })
                            .on('error', (error) => {
                                server.close(() => {
                                    done(error);
                                });
                            })
                            .on('response', (response) => {
                                try {
                                    assert.equal(response.getStatusCode(), 200);
                                    const body = response.getBody();
                                    assert.equal(body.value.PropertyString, 'string');
                                    assert.equal(body.value.PropertyInt16, 32767);
                                    done();
                                } catch (error) {
                                    done(error);
                                } finally {
                                    server.close();
                                }
                            })
                            .get();
                    });
            });

            it('should GET /ESTwoPrim', done => {

                const url = '/ESTwoPrim';

                createServer(
                    (req, res) => {
                        assert.equal(req.method, 'GET');
                        assert.equal(req.url, url);
                        return res.end(JSON.stringify(esTwoPrimV2, null, 2));
                    },
                    (port, server) => {

                        new ClientRequest({
                            serviceRootUrl: `http://localhost:${port}`,
                            url: new UriBuilder(edm).v2().entitySet('ESTwoPrim'),
                            Accept: 'application/json',
                            OdataVersion: '2.0',
                            edm
                        })
                            .on('error', (error) => {
                                server.close(() => {
                                    done(error);
                                });
                            })
                            .on('response', (response) => {
                                try {
                                    assert.equal(response.getHeader('content-type'), 'application/json');
                                    assert.equal(response.getStatusCode(), 200);
                                    const body = response.getBody();
                                    assert.equal(body.value[0].PropertyInt16, 1);
                                    assert.equal(body.value[1].PropertyInt16, 2);
                                    done();
                                } catch (error) {
                                    done(error);
                                } finally {
                                    server.close();
                                }
                            })
                            .get();
                    });
            });

            it('should GET /ESTwoPrim and use Accept/Content-Type/DataServiceVersion via headers', done => {

                const url = 'ESTwoPrim';

                createServer(
                    (req, res) => {
                        assert.equal(req.method, 'GET');
                        assert.equal(req.url, '/' + url);
                        return res.end(JSON.stringify(esTwoPrimV2, null, 2));
                    },
                    (port, server) => {

                        new ClientRequest({
                            serviceRootUrl: `http://localhost:${port}/`,
                            url: new UriBuilder(edm).v2().entitySet('ESTwoPrim'),
                            headers: {
                                Accept: 'application/json',
                                'Content-Type': 'application/json',
                                DataServiceVersion: '2.0',
                                MaxDataServiceVersion: '2.0',
                            },
                            edm
                        })
                            .on('error', (error) => {
                                server.close(() => {
                                    done(error);
                                });
                            })
                            .on('response', (response) => {
                                try {
                                    assert.equal(response.getHeader('content-type'), 'application/json');
                                    assert.equal(response.getStatusCode(), 200);
                                    const body = response.getBody();
                                    assert.equal(body.value[0].PropertyInt16, 1);
                                    assert.equal(body.value[1].PropertyInt16, 2);
                                    done();
                                } catch (error) {
                                    done(error);
                                } finally {
                                    server.close();
                                }
                            })
                            .get();
                    });
            });


            it.skip('should GET https://sapes5.sapdevcenter.com/sap/opu/odata/iwbep/gwsample_basic/BusinessPartner?...', done => {

                new ClientRequest({
                    serviceRootUrl: 'https://sapes5.sapdevcenter.com/sap/opu/odata/iwbep/gwsample_basic',
                    url: new UriBuilder(gwSamplewServiceEdm).v2().entitySet('BusinessPartnerSet')
                        .top(1).select('CompanyName'),
                    headers: {
                        Authorization: 'Basic ZDAzNzUzOTpKN3o0MGsxMg=='
                    },
                })
                    .on('error', done)
                    .on('response', (response) => {
                        try {
                            assert.equal(response.getHeader('content-type'), 'application/json; charset=utf-8');
                            assert.equal(response.getStatusCode(), 200);
                            const body = response.getBody();
                            assert.equal(
                                body.value[0]['*@odata.id'],
                                'https://sapes5.sapdevcenter.com/sap/opu/odata/iwbep/gwsample_basic/BusinessPartnerSet(\'0100000000\')'
                            );
                            assert.equal(body.value[0]['*@odata.type'], 'GWSAMPLE_BASIC.BusinessPartner');
                            assert.equal(body.value[0].CompanyName, 'SAP');

                            done();
                        } catch (error) {
                            done(error);
                        }
                    })
                    .get();
            }).timeout(5000);

            it('should throw error with wrong Content-Type type', done => {

                createServer(
                    (req, res) => {
                        assert.equal(req.method, 'GET');
                        res.setHeader('Content-Type', 'wrong/type');
                        return res.end('Wrong content type');
                    },
                    (port, server) => {

                        new ClientRequest({
                            serviceRootUrl: `http://localhost:${port}/`,
                            url: new UriBuilder(edm).v2().entitySet('ESTwoPrim'),
                            edm
                        })
                            .on('error', (error) => {
                                server.close(() => {
                                    done(error);
                                });
                            })
                            .on('response', (response) => {

                                try {
                                    assert.throws(() => {
                                        response.getBody();
                                    }, /Deserialize Content-Type of 'wrong\/type' is not supported/);
                                    done();
                                } catch (error) {
                                    done(error);
                                } finally {
                                    server.close();
                                }
                            })
                            .get();
                    });
            });

            it('should throw error with wrong server address', done => {

                new ClientRequest({
                    serviceRootUrl: 'http://wrongServerAddress:1234/',
                    url: new UriBuilder(edm).v2().entitySet('ESTwoPrim'),
                    edm
                })
                    .on('error', (error) => {
                        try {
                            assert.equal(
                                error.message,
                                'getaddrinfo ENOTFOUND wrongserveraddress wrongserveraddress:1234'
                            );
                            done();
                        } catch (tryError) {
                            done(tryError);
                        }
                    })
                    .on('response', () => {
                        done(new Error('Should not reach this code'));
                    })
                    .get();
            });

        });

    });

});
