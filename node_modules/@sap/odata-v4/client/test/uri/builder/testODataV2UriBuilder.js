'use strict';

const assert = require('assert');
const UriBuilder = require('../../../lib/uri/builder/UriBuilder');
const EdmPrimitiveTypeKind = require('../../../../lib/edm/EdmPrimitiveTypeKind');

describe(__filename, () => {
    describe('should test the ODataV2UriBuilder', () => {

        const test = data => {
            it(`should build uri "${data.uri}"`, () => {
                assert.strictEqual(data.builder().getUrl(), data.uri);
            });
        };

        describe('should test batch and metadata', () => {

            it('should build the uri for $batch', () => {
                test({ builder: new UriBuilder().v2().batch(), uri: '$batch' });
            });

            it('should build the uri for $metadata', () => {
                test({ builder: new UriBuilder().v2().metadata(), uri: '$metadata' });
            });

        });

        describe('should test basic entityset and key building', () => {
            const testdata = [
                // Entitysets with different kind of keys that get encoded implicitly by their type
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset'),
                    uri: 'entityset'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').key(1),
                    uri: 'entityset(1)'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').key(true),
                    uri: 'entityset(true)'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').key('1'),
                    uri: 'entityset(1)'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').key("'1'"),
                    uri: "entityset('1')"
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset')
                        .key(Buffer.from('binarydata', 'utf-8'), EdmPrimitiveTypeKind.Binary),
                    uri: "entityset(X'62696e61727964617461')"
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset')
                        .key(true, EdmPrimitiveTypeKind.Boolean),
                    uri: 'entityset(true)'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset')
                        .key(255, EdmPrimitiveTypeKind.Byte),
                    uri: 'entityset(255)'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset')
                        .key(1.79E+10, EdmPrimitiveTypeKind.Decimal),
                    uri: 'entityset(17900000000M)'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset')
                        .key(123456.789, EdmPrimitiveTypeKind.Double),
                    uri: 'entityset(123456.789D)'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset')
                        .key('1234abcd-56ef-dc90-7f8e-a1b2c3d4e5f6', EdmPrimitiveTypeKind.Guid),
                    uri: "entityset(guid'1234abcd-56ef-dc90-7f8e-a1b2c3d4e5f6')"
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset')
                        .key(32767, EdmPrimitiveTypeKind.Int16),
                    uri: 'entityset(32767)'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset')
                        .key(2147483647, EdmPrimitiveTypeKind.Int32),
                    uri: 'entityset(2147483647)'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset')
                        .key(Number.MAX_SAFE_INTEGER, EdmPrimitiveTypeKind.Int64),
                    uri: `entityset(${Number.MAX_SAFE_INTEGER}L)`
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset')
                        .key(127, EdmPrimitiveTypeKind.SByte),
                    uri: 'entityset(127)'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset')
                        .key(3.4028234663852886E+38, EdmPrimitiveTypeKind.Single),
                    uri: 'entityset(3.4028234663852886e+38F)'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset')
                        .key('string', EdmPrimitiveTypeKind.String),
                    uri: "entityset('string')"
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset')
                        .key('2017-11-30', EdmPrimitiveTypeKind.Date),
                    uri: "entityset(datetime'2017-11-30T00:00:00')"
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset')
                        .key('2017-11-30T13:24Z', EdmPrimitiveTypeKind.DateTimeOffset),
                    uri: "entityset(datetimeoffset'2017-11-30T13:24Z')"
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset')
                        .key('23:59:59.00000', EdmPrimitiveTypeKind.TimeOfDay),
                    uri: "entityset(time'PT23H59M59.00000S')"
                },
                // compositeKeys
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset')
                        .compositeKey('key1', 1)
                        .compositeKey('key2', 'string'),
                    uri: 'entityset(key1=1,key2=string)'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset')
                        .compositeKey('key1', 1, EdmPrimitiveTypeKind.Int16)
                        .compositeKey('key2', 'string', EdmPrimitiveTypeKind.String),
                    uri: "entityset(key1=1,key2='string')"
                },
                // $count
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset')
                        .count(),
                    uri: 'entityset/$count'
                }
            ];

            for (const data of testdata) {
                test(data);
            }
        });

        describe('should test basic query-options', () => {
            const testdata = [
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').top(10),
                    uri: 'entityset?$top=10'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').skip(10),
                    uri: 'entityset?$skip=10'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').inlineCount(),
                    uri: 'entityset?$inlinecount=allpages'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').select('Property1').select('Property2'),
                    uri: 'entityset?$select=Property1,Property2'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset')
                        .orderby('Property1', 'asc').orderby('Property2', 'desc'),
                    uri: 'entityset?$orderby=Property1 asc,Property2 desc'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').expand('NavigationProperty1'),
                    uri: 'entityset?$expand=NavigationProperty1'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').filter('Property1 eq 5'),
                    uri: 'entityset?$filter=Property1 eq 5'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset')
                        .query('custom', 'this is a custom query option'),
                    uri: 'entityset?custom=this is a custom query option'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').format('json'),
                    uri: 'entityset?$format=json'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').top(3).skip(5).inlineCount(false),
                    uri: 'entityset?$top=3&$skip=5&$inlinecount=none'
                }
            ];

            for (const data of testdata) {
                test(data);
            }

            it('should throw an error, if a wrong value fpr queryOption $count is provided', () => {
                assert.throws(() => {
                    new UriBuilder().v2().entitySet('entityset').inlineCount('true');
                });
            });
        });

        describe('should test basic functionImport building', () => {
            const testdata = [
                {
                    builder: () => new UriBuilder().v2().functionImport('function')
                        .parameter('parameter1', 1),
                    uri: 'function?parameter1=1'
                },
                {
                    builder: () => new UriBuilder().v2().functionImport('function')
                        .parameter('parameter1', true),
                    uri: 'function?parameter1=true'
                },
                {
                    builder: () => new UriBuilder().v2().functionImport('function')
                        .parameter('parameter1', 'string'),
                    uri: 'function?parameter1=string'
                },
                {
                    builder: () => new UriBuilder().v2().functionImport('function')
                        .parameter('parameter1', "'string'"),
                    uri: "function?parameter1='string'"
                },
                {
                    builder: () => new UriBuilder().v2().functionImport('function')
                        .parameter('parameter1', 1, EdmPrimitiveTypeKind.Int32),
                    uri: 'function?parameter1=1'
                },
                {
                    builder: () => new UriBuilder().v2().functionImport('function')
                        .parameter('parameter1', 'string', EdmPrimitiveTypeKind.String),
                    uri: "function?parameter1='string'"
                },
                // functionImport with keys
                {
                    builder: () => new UriBuilder().v2().functionImport('function')
                        .key(1),
                    uri: 'function(1)'
                },
                {
                    builder: () => new UriBuilder().v2().functionImport('function')
                        .compositeKey('key1', 1)
                        .compositeKey('key2', 'string'),
                    uri: 'function(key1=1,key2=string)'
                },
                // parameter and keys
                {
                    builder: () => new UriBuilder().v2().functionImport('function')
                        .parameter('parameter1', 1)
                        .key(1),
                    uri: 'function(1)?parameter1=1'
                },
                {
                    builder: () => new UriBuilder().v2().functionImport('function')
                        .parameter('parameter1', 1)
                        .compositeKey('key1', 1)
                        .compositeKey('key2', 'string'),
                    uri: 'function(key1=1,key2=string)?parameter1=1'
                },
                // $value and $count
                {
                    builder: () => new UriBuilder().v2().functionImport('function')
                        .value(),
                    uri: 'function/$value'
                },
                {
                    builder: () => new UriBuilder().v2().functionImport('function')
                        .key(1)
                        .value(),
                    uri: 'function(1)/$value'
                },
                {
                    builder: () => new UriBuilder().v2().functionImport('function')
                        .parameter('parameter1', 1)
                        .value(),
                    uri: 'function/$value?parameter1=1'
                },
                {
                    builder: () => new UriBuilder().v2().functionImport('function')
                        .count(),
                    uri: 'function/$count'
                }
            ];

            for (const data of testdata) {
                test(data);
            }
        });

        describe('should test resource path with navigation and properties', () => {

            const testdata = [
                // Navigation properties
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').key(1)
                        .navigateSingle('navigationOne'),
                    uri: 'entityset(1)/navigationOne'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').key(1)
                        .navigateSingle('navigationOne')
                        .navigateSingle('navigationOne'),
                    uri: 'entityset(1)/navigationOne/navigationOne'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').key(1)
                        .navigateSingle('navigationOne')
                        .navigateCollection('navigationMany'),
                    uri: 'entityset(1)/navigationOne/navigationMany'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').key(1)
                        .navigateSingle('navigationOne')
                        .navigateCollection('navigationMany').key(2)
                        .navigateSingle('navigationOne'),
                    uri: 'entityset(1)/navigationOne/navigationMany(2)/navigationOne'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').key(1)
                        .navigateCollection('navigationMany'),
                    uri: 'entityset(1)/navigationMany'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').key(1)
                        .navigateCollection('navigationMany').key(2),
                    uri: 'entityset(1)/navigationMany(2)'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').key(1)
                        .navigateCollection('navigationMany').key(2)
                        .navigateSingle('navigationOne'),
                    uri: 'entityset(1)/navigationMany(2)/navigationOne'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').key(1)
                        .navigateCollection('navigationMany').key(2)
                        .navigateSingle('navigationOne')
                        .navigateCollection('navigationMany'),
                    uri: 'entityset(1)/navigationMany(2)/navigationOne/navigationMany'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').key(1)
                        .navigateCollection('navigationMany').key(2)
                        .navigateCollection('navigationMany').key(3),
                    uri: 'entityset(1)/navigationMany(2)/navigationMany(3)'
                },
                // $links
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').key(1)
                        .navigateSingle('navigationSingle')
                        .links()
                        .navigateSingle('navigation'),
                    uri: 'entityset(1)/navigationSingle/$links/navigation'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').key(1)
                        .navigateCollection('navigationMany').key(1)
                        .links()
                        .navigateSingle('navigation'),
                    uri: 'entityset(1)/navigationMany(1)/$links/navigation'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').key(1)
                        .navigateSingle('navigationSingle')
                        .links()
                        .navigateCollection('navigation'),
                    uri: 'entityset(1)/navigationSingle/$links/navigation'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').key(1)
                        .navigateCollection('navigationMany').key(1)
                        .links()
                        .navigateCollection('navigation'),
                    uri: 'entityset(1)/navigationMany(1)/$links/navigation'
                },
                // Properties
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').key(1)
                        .primitiveProperty('primitiveProperty'),
                    uri: 'entityset(1)/primitiveProperty'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').key(1)
                        .complexProperty('complexProperty'),
                    uri: 'entityset(1)/complexProperty'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').key(1)
                        .complexProperty('complexProperty').primitiveProperty('primitiveProperty'),
                    uri: 'entityset(1)/complexProperty/primitiveProperty'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').key(1)
                        .complexProperty('complexProperty').complexProperty('complexProperty'),
                    uri: 'entityset(1)/complexProperty/complexProperty'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').key(1)
                        .complexProperty('complexProperty')
                        .complexProperty('complexProperty')
                        .primitiveProperty('primitiveProperty'),
                    uri: 'entityset(1)/complexProperty/complexProperty/primitiveProperty'
                },
                // Navigation and Properties
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').key(1)
                        .navigateSingle('navigationOne')
                        .primitiveProperty('primitiveProperty'),
                    uri: 'entityset(1)/navigationOne/primitiveProperty'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').key(1)
                        .navigateCollection('navigationMany').key(2)
                        .primitiveProperty('primitiveProperty'),
                    uri: 'entityset(1)/navigationMany(2)/primitiveProperty'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').key(1)
                        .navigateCollection('navigationMany').key(2)
                        .complexProperty('complexProperty'),
                    uri: 'entityset(1)/navigationMany(2)/complexProperty'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').key(1)
                        .navigateCollection('navigationMany').key(2)
                        .complexProperty('complexProperty')
                        .primitiveProperty('primitiveProperty'),
                    uri: 'entityset(1)/navigationMany(2)/complexProperty/primitiveProperty'
                },
                // $value
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').key(1).value(),
                    uri: 'entityset(1)/$value'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').key(1)
                        .navigateSingle('navigationOne').value(),
                    uri: 'entityset(1)/navigationOne/$value'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').key(1)
                        .navigateCollection('navigationMany').key(2).value(),
                    uri: 'entityset(1)/navigationMany(2)/$value'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').key(1)
                        .complexProperty('complexProperty').value(),
                    uri: 'entityset(1)/complexProperty/$value'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').key(1)
                        .primitiveProperty('primitiveProperty').value(),
                    uri: 'entityset(1)/primitiveProperty/$value'
                },
                {
                    builder: () => new UriBuilder().v2().entitySet('entityset').key(1)
                        .complexProperty('complexProperty').primitiveProperty('primitiveProperty').value(),
                    uri: 'entityset(1)/complexProperty/primitiveProperty/$value'
                }
            ];

            for (const data of testdata) {
                test(data);
            }

        });

    });
});
