'use strict';

const assert = require('assert');
const UriBuilder = require('../../../lib/uri/builder/UriBuilder');
const edm = require('../../../../test/TestUtils').createEdm();
const FQN = require('../../../../lib/FullQualifiedName');
const RepresentationsKinds = require('../../../../lib/format/RepresentationKind').Kinds;
const EdmPrimitiveTypeKind = require('../../../../lib/edm/EdmPrimitiveTypeKind');
const HttpMethods = require('../../../../lib/http/HttpMethod').Methods;

const createFqn = (name) => {
    return new FQN('Namespace1_Alias', name);
};

describe(__filename, () => {
    describe('should test the EdmType, Response- and RequestRepresentationKind returned by the v4 UriBuilder', () => {

        describe('should test GET/HEAD cases', () => {
            const testGet = (testInfo) => {
                const methods = [HttpMethods.GET];
                for (const httpMethod of methods) {
                    it('should test EdmType, Response- and RequestRepresentationKind for '
                        + `"${httpMethod} ${testInfo.title}"`, () => {
                        const uri = testInfo.uriBuilder();
                        assert.equal(uri.getResponseEdmType(), testInfo.expectedEdmType);
                        assert.equal(uri.getResponseRepresentationKind(httpMethod),
                            testInfo.expectedResponseRepresentationKind);
                        assert.equal(uri.getRequestRepresentationKind(httpMethod),
                            testInfo.expectedRequestRepresentationKind);
                        assert.equal(uri.getRequestEdmType(), testInfo.expectedEdmType);
                    });
                }
            };

            const testdata = [
                {
                    title: '$metadata',
                    uriBuilder: () => new UriBuilder(edm).v4().metadata(),
                    expectedEdmType: null,
                    expectedResponseRepresentationKind: RepresentationsKinds.METADATA,
                    expectedRequestRepresentationKind: RepresentationsKinds.NO_CONTENT
                },
                {
                    title: 'Entityset',
                    uriBuilder: () => new UriBuilder(edm).v4().entitySet('ESAllPrim'),
                    expectedEdmType: edm.getEntityType(createFqn('ETAllPrim')),
                    expectedResponseRepresentationKind: RepresentationsKinds.ENTITY_COLLECTION,
                    expectedRequestRepresentationKind: RepresentationsKinds.NO_CONTENT
                },
                {
                    title: 'Entityset(key)',
                    uriBuilder: () => new UriBuilder(edm).v4().entitySet('ESAllPrim').key(1),
                    expectedEdmType: edm.getEntityType(createFqn('ETAllPrim')),
                    expectedResponseRepresentationKind: RepresentationsKinds.ENTITY,
                    expectedRequestRepresentationKind: RepresentationsKinds.NO_CONTENT
                },
                {
                    title: 'Singleton',
                    uriBuilder: () => new UriBuilder(edm).v4().singleton('SI'),
                    expectedEdmType: edm.getEntityType(createFqn('ETTwoPrim')),
                    expectedResponseRepresentationKind: RepresentationsKinds.ENTITY,
                    expectedRequestRepresentationKind: RepresentationsKinds.NO_CONTENT
                },
                {
                    title: 'Entityset(key)/NavigationToOne',
                    uriBuilder: () => new UriBuilder(edm).v4().entitySet('ESAllPrim').key(1)
                        .navigateSingle('NavPropertyETTwoPrimOne'),
                    expectedEdmType: edm.getEntityType(createFqn('ETTwoPrim')),
                    expectedResponseRepresentationKind: RepresentationsKinds.ENTITY,
                    expectedRequestRepresentationKind: RepresentationsKinds.NO_CONTENT
                },
                {
                    title: 'Entityset(key)/NavigationToMany',
                    uriBuilder: () => new UriBuilder(edm).v4().entitySet('ESAllPrim').key(1)
                        .navigateCollection('NavPropertyETTwoPrimMany'),
                    expectedEdmType: edm.getEntityType(createFqn('ETTwoPrim')),
                    expectedResponseRepresentationKind: RepresentationsKinds.ENTITY_COLLECTION,
                    expectedRequestRepresentationKind: RepresentationsKinds.NO_CONTENT
                },
                {
                    title: 'Entityset(key)/NavigationToMany(key)',
                    uriBuilder: () => new UriBuilder(edm).v4().entitySet('ESAllPrim').key(1)
                        .navigateCollection('NavPropertyETTwoPrimMany').key(1),
                    expectedEdmType: edm.getEntityType(createFqn('ETTwoPrim')),
                    expectedResponseRepresentationKind: RepresentationsKinds.ENTITY,
                    expectedRequestRepresentationKind: RepresentationsKinds.NO_CONTENT
                },
                {
                    title: 'Entityset/$ref',
                    uriBuilder: () => new UriBuilder(edm).v4().entitySet('ESAllPrim').ref(),
                    expectedEdmType: edm.getEntityType(createFqn('ETAllPrim')),
                    expectedResponseRepresentationKind: RepresentationsKinds.REFERENCE_COLLECTION,
                    expectedRequestRepresentationKind: RepresentationsKinds.NO_CONTENT
                },
                {
                    title: 'Entityset(key)/$ref',
                    uriBuilder: () => new UriBuilder(edm).v4().entitySet('ESAllPrim').key(1).ref(),
                    expectedEdmType: edm.getEntityType(createFqn('ETAllPrim')),
                    expectedResponseRepresentationKind: RepresentationsKinds.REFERENCE,
                    expectedRequestRepresentationKind: RepresentationsKinds.NO_CONTENT
                },
                {
                    title: 'Entityset/$count',
                    uriBuilder: () => new UriBuilder(edm).v4().entitySet('ESAllPrim').count(),
                    expectedEdmType: edm.getEntityType(createFqn('ETAllPrim')),
                    expectedResponseRepresentationKind: RepresentationsKinds.COUNT,
                    expectedRequestRepresentationKind: RepresentationsKinds.NO_CONTENT
                },
                {
                    title: 'Entityset(key)/PrimitiveProperty',
                    uriBuilder: () => new UriBuilder(edm).v4().entitySet('ESAllPrim').key(1)
                        .primitiveProperty('PropertyInt16'),
                    expectedEdmType: edm.getEntityType(createFqn('ETAllPrim')).getProperty('PropertyInt16'),
                    expectedResponseRepresentationKind: RepresentationsKinds.PRIMITIVE,
                    expectedRequestRepresentationKind: RepresentationsKinds.NO_CONTENT
                },
                {
                    title: 'Entityset(key)/ComplexProperty',
                    uriBuilder: () => new UriBuilder(edm).v4().entitySet('ESMixPrimCollComp').key(1)
                        .complexProperty('PropertyComp'),
                    expectedEdmType: edm.getEntityType(createFqn('ETMixPrimCollComp')).getProperty('PropertyComp'),
                    expectedResponseRepresentationKind: RepresentationsKinds.COMPLEX,
                    expectedRequestRepresentationKind: RepresentationsKinds.NO_CONTENT
                },
                {
                    title: 'Entityset(key)/PrimitiveCollectionProperty',
                    uriBuilder: () => new UriBuilder(edm).v4().entitySet('ESMixPrimCollComp').key(1)
                        .primitiveCollectionProperty('CollPropertyString'),
                    expectedEdmType: edm.getEntityType(createFqn('ETMixPrimCollComp'))
                        .getProperty('CollPropertyString'),
                    expectedResponseRepresentationKind: RepresentationsKinds.PRIMITIVE_COLLECTION,
                    expectedRequestRepresentationKind: RepresentationsKinds.NO_CONTENT
                },
                {
                    title: 'Entityset(key)/ComplexCollectionProperty',
                    uriBuilder: () => new UriBuilder(edm).v4().entitySet('ESMixPrimCollComp').key(1)
                        .complexCollectionProperty('CollPropertyComp'),
                    expectedEdmType: edm.getEntityType(createFqn('ETMixPrimCollComp')).getProperty('CollPropertyComp'),
                    expectedResponseRepresentationKind: RepresentationsKinds.COMPLEX_COLLECTION,
                    expectedRequestRepresentationKind: RepresentationsKinds.NO_CONTENT
                },
                {
                    title: 'Entityset(key)/PrimitiveProperty/$value',
                    uriBuilder: () => new UriBuilder(edm).v4().entitySet('ESAllPrim').key(1)
                        .primitiveProperty('PropertyInt16').value(),
                    expectedEdmType: edm.getEntityType(createFqn('ETAllPrim')).getProperty('PropertyInt16'),
                    expectedResponseRepresentationKind: RepresentationsKinds.PRIMITIVE_VALUE,
                    expectedRequestRepresentationKind: RepresentationsKinds.NO_CONTENT
                },
                {
                    title: 'Entityset(key)/BinaryProperty/$value',
                    uriBuilder: () => new UriBuilder(edm).v4().entitySet('ESAllPrim').key(1)
                        .primitiveProperty('PropertyBinary').value(),
                    expectedEdmType: edm.getEntityType(createFqn('ETAllPrim')).getProperty('PropertyBinary'),
                    expectedResponseRepresentationKind: RepresentationsKinds.BINARY,
                    expectedRequestRepresentationKind: RepresentationsKinds.NO_CONTENT
                },
                {
                    title: 'Entity-FunctionImport',
                    uriBuilder: () => new UriBuilder(edm).v4().functionImport('FICRTETKeyNav'),
                    expectedEdmType: edm.getEntityType(createFqn('ETKeyNav')),
                    expectedResponseRepresentationKind: RepresentationsKinds.ENTITY,
                    expectedRequestRepresentationKind: RepresentationsKinds.NO_CONTENT
                },
                {
                    title: 'EntityCollection-FunctionImport',
                    uriBuilder: () => new UriBuilder(edm).v4().functionImport('FICRTCollESTwoKeyNavParam'),
                    expectedEdmType: edm.getEntityType(createFqn('ETTwoKeyNav')),
                    expectedResponseRepresentationKind: RepresentationsKinds.ENTITY_COLLECTION,
                    expectedRequestRepresentationKind: RepresentationsKinds.NO_CONTENT
                }
            ];

            for (const test of testdata) {
                testGet(test);
            }
        });

        describe('should test PATCH cases', () => {
            const testPatch = (testInfo) => {
                const httpMethod = HttpMethods.PATCH;
                it(`should test EdmType, Response- and RequestRepresentationKind for "PATCH ${testInfo.title}"`, () => {
                    const uri = testInfo.uriBuilder();
                    assert.equal(uri.getResponseEdmType(), testInfo.expectedEdmType);
                    assert.equal(uri.getResponseRepresentationKind(httpMethod),
                        testInfo.expectedResponseRepresentationKind);
                    assert.equal(uri.getRequestRepresentationKind(httpMethod),
                        testInfo.expectedRequestRepresentationKind);
                    assert.equal(uri.getRequestEdmType(), testInfo.expectedEdmType);
                });
            };

            const testdata = [
                {
                    title: 'Entityset(key)',
                    uriBuilder: () => new UriBuilder(edm).v4().entitySet('ESAllPrim').key(1),
                    expectedEdmType: edm.getEntityType(createFqn('ETAllPrim')),
                    expectedResponseRepresentationKind: RepresentationsKinds.ENTITY,
                    expectedRequestRepresentationKind: RepresentationsKinds.ENTITY
                },
                {
                    title: 'Entityset(key)/NavigationToOne',
                    uriBuilder: () => new UriBuilder(edm).v4().entitySet('ESAllPrim').key(1)
                        .navigateSingle('NavPropertyETTwoPrimOne'),
                    expectedEdmType: edm.getEntityType(createFqn('ETTwoPrim')),
                    expectedResponseRepresentationKind: RepresentationsKinds.ENTITY,
                    expectedRequestRepresentationKind: RepresentationsKinds.ENTITY
                },
                {
                    title: 'Entityset(key)/NavigationToMany(key)',
                    uriBuilder: () => new UriBuilder(edm).v4().entitySet('ESAllPrim').key(1)
                        .navigateCollection('NavPropertyETTwoPrimMany').key(1),
                    expectedEdmType: edm.getEntityType(createFqn('ETTwoPrim')),
                    expectedResponseRepresentationKind: RepresentationsKinds.ENTITY,
                    expectedRequestRepresentationKind: RepresentationsKinds.ENTITY
                },
                {
                    title: 'Entityset(key)/ComplexProperty',
                    uriBuilder: () => new UriBuilder(edm).v4().entitySet('ESMixPrimCollComp').key(1)
                        .complexProperty('PropertyComp'),
                    expectedEdmType: edm.getEntityType(createFqn('ETMixPrimCollComp')).getProperty('PropertyComp'),
                    expectedResponseRepresentationKind: RepresentationsKinds.COMPLEX,
                    expectedRequestRepresentationKind: RepresentationsKinds.COMPLEX
                }
            ];

            for (const test of testdata) {
                testPatch(test);
            }
        });

        describe('should test PUT cases', () => {
            const testPut = (testInfo) => {
                const httpMethod = HttpMethods.PUT;
                it(`should test EdmType, Response- and RequestRepresentationKind for "PUT ${testInfo.title}"`, () => {
                    const uri = testInfo.uriBuilder();
                    assert.equal(uri.getResponseEdmType(), testInfo.expectedEdmType);
                    assert.equal(uri.getResponseRepresentationKind(httpMethod),
                        testInfo.expectedResponseRepresentationKind);
                    assert.equal(uri.getRequestRepresentationKind(httpMethod),
                        testInfo.expectedRequestRepresentationKind);
                    assert.equal(uri.getRequestEdmType(), testInfo.expectedEdmType);
                });
            };

            const testdata = [
                {
                    title: 'Entityset(key)',
                    uriBuilder: () => new UriBuilder(edm).v4().entitySet('ESAllPrim').key(1),
                    expectedEdmType: edm.getEntityType(createFqn('ETAllPrim')),
                    expectedResponseRepresentationKind: RepresentationsKinds.ENTITY,
                    expectedRequestRepresentationKind: RepresentationsKinds.ENTITY
                },
                {
                    title: 'Entityset(key)/NavigationToOne',
                    uriBuilder: () => new UriBuilder(edm).v4().entitySet('ESAllPrim').key(1)
                        .navigateSingle('NavPropertyETTwoPrimOne'),
                    expectedEdmType: edm.getEntityType(createFqn('ETTwoPrim')),
                    expectedResponseRepresentationKind: RepresentationsKinds.ENTITY,
                    expectedRequestRepresentationKind: RepresentationsKinds.ENTITY
                },
                {
                    title: 'Entityset(key)/NavigationToMany(key)',
                    uriBuilder: () => new UriBuilder(edm).v4().entitySet('ESAllPrim').key(1)
                        .navigateCollection('NavPropertyETTwoPrimMany').key(1),
                    expectedEdmType: edm.getEntityType(createFqn('ETTwoPrim')),
                    expectedResponseRepresentationKind: RepresentationsKinds.ENTITY,
                    expectedRequestRepresentationKind: RepresentationsKinds.ENTITY
                },
                {
                    title: 'Entityset(key)/NavigationToOne/$ref',
                    uriBuilder: () => new UriBuilder(edm).v4().entitySet('ESAllPrim').key(1)
                        .navigateSingle('NavPropertyETTwoPrimOne').ref(),
                    expectedEdmType: edm.getEntityType(createFqn('ETTwoPrim')),
                    expectedResponseRepresentationKind: RepresentationsKinds.NO_CONTENT,
                    expectedRequestRepresentationKind: RepresentationsKinds.REFERENCE
                },
                {
                    title: 'Entityset(key)/PrimitiveProperty',
                    uriBuilder: () => new UriBuilder(edm).v4().entitySet('ESAllPrim').key(1)
                        .primitiveProperty('PropertyInt16'),
                    expectedEdmType: edm.getEntityType(createFqn('ETAllPrim')).getProperty('PropertyInt16'),
                    expectedResponseRepresentationKind: RepresentationsKinds.PRIMITIVE,
                    expectedRequestRepresentationKind: RepresentationsKinds.PRIMITIVE
                },
                {
                    title: 'Entityset(key)/ComplexProperty',
                    uriBuilder: () => new UriBuilder(edm).v4().entitySet('ESMixPrimCollComp').key(1)
                        .complexProperty('PropertyComp'),
                    expectedEdmType: edm.getEntityType(createFqn('ETMixPrimCollComp')).getProperty('PropertyComp'),
                    expectedResponseRepresentationKind: RepresentationsKinds.COMPLEX,
                    expectedRequestRepresentationKind: RepresentationsKinds.COMPLEX
                },
                {
                    title: 'Entityset(key)/PrimitiveCollectionProperty',
                    uriBuilder: () => new UriBuilder(edm).v4().entitySet('ESMixPrimCollComp').key(1)
                        .primitiveCollectionProperty('CollPropertyString'),
                    expectedEdmType: edm.getEntityType(createFqn('ETMixPrimCollComp'))
                        .getProperty('CollPropertyString'),
                    expectedResponseRepresentationKind: RepresentationsKinds.PRIMITIVE_COLLECTION,
                    expectedRequestRepresentationKind: RepresentationsKinds.PRIMITIVE_COLLECTION
                },
                {
                    title: 'Entityset(key)/ComplexCollectionProperty',
                    uriBuilder: () => new UriBuilder(edm).v4().entitySet('ESMixPrimCollComp').key(1)
                        .complexCollectionProperty('CollPropertyComp'),
                    expectedEdmType: edm.getEntityType(createFqn('ETMixPrimCollComp')).getProperty('CollPropertyComp'),
                    expectedResponseRepresentationKind: RepresentationsKinds.COMPLEX_COLLECTION,
                    expectedRequestRepresentationKind: RepresentationsKinds.COMPLEX_COLLECTION
                },
                {
                    title: 'Entityset(key)/PrimitiveProperty/$value',
                    uriBuilder: () => new UriBuilder(edm).v4().entitySet('ESAllPrim').key(1)
                        .primitiveProperty('PropertyInt16').value(),
                    expectedEdmType: edm.getEntityType(createFqn('ETAllPrim')).getProperty('PropertyInt16'),
                    expectedResponseRepresentationKind: RepresentationsKinds.PRIMITIVE_VALUE,
                    expectedRequestRepresentationKind: RepresentationsKinds.PRIMITIVE_VALUE
                },
                {
                    title: 'Entityset(key)/BinaryProperty/$value',
                    uriBuilder: () => new UriBuilder(edm).v4().entitySet('ESAllPrim').key(1)
                        .primitiveProperty('PropertyBinary').value(),
                    expectedEdmType: edm.getEntityType(createFqn('ETAllPrim')).getProperty('PropertyBinary'),
                    expectedResponseRepresentationKind: RepresentationsKinds.BINARY,
                    expectedRequestRepresentationKind: RepresentationsKinds.BINARY
                }
            ];

            for (const test of testdata) {
                testPut(test);
            }
        });

        describe('should test POST cases', () => {
            const testPost = (testInfo) => {
                const httpMethod = HttpMethods.POST;
                it(`should test EdmType, Response- and RequestRepresentationKind for "POST ${testInfo.title}"`, () => {
                    const uri = testInfo.uriBuilder();
                    assert.equal(uri.getResponseEdmType(), testInfo.expectedEdmType);
                    assert.equal(uri.getResponseRepresentationKind(httpMethod),
                        testInfo.expectedResponseRepresentationKind);
                    assert.equal(uri.getRequestRepresentationKind(httpMethod),
                        testInfo.expectedRequestRepresentationKind);
                    if (testInfo.expectedActionParameters) {
                        assert.deepEqual(uri.getRequestEdmType(), testInfo.expectedActionParameters);
                    } else {
                        assert.equal(uri.getRequestEdmType(), testInfo.expectedEdmType);
                    }
                });
            };

            const testdata = [
                {
                    title: 'Entityset',
                    uriBuilder: () => new UriBuilder(edm).v4().entitySet('ESAllPrim'),
                    expectedEdmType: edm.getEntityType(createFqn('ETAllPrim')),
                    expectedResponseRepresentationKind: RepresentationsKinds.ENTITY,
                    expectedRequestRepresentationKind: RepresentationsKinds.ENTITY
                },
                {
                    title: 'Entityset(key)/NavigationToMany',
                    uriBuilder: () => new UriBuilder(edm).v4().entitySet('ESAllPrim').key(1)
                        .navigateCollection('NavPropertyETTwoPrimMany'),
                    expectedEdmType: edm.getEntityType(createFqn('ETTwoPrim')),
                    expectedResponseRepresentationKind: RepresentationsKinds.ENTITY,
                    expectedRequestRepresentationKind: RepresentationsKinds.ENTITY
                },
                {
                    title: 'Entityset(key)/NavigationToOne/$ref',
                    uriBuilder: () => new UriBuilder(edm).v4().entitySet('ESAllPrim').key(1)
                        .navigateCollection('NavPropertyETTwoPrimMany').ref(),
                    expectedEdmType: edm.getEntityType(createFqn('ETTwoPrim')),
                    expectedResponseRepresentationKind: RepresentationsKinds.NO_CONTENT,
                    expectedRequestRepresentationKind: RepresentationsKinds.REFERENCE
                },
                {
                    title: 'batch',
                    uriBuilder: () => new UriBuilder(edm).v4().batch(),
                    expectedEdmType: null,
                    expectedResponseRepresentationKind: RepresentationsKinds.BATCH,
                    expectedRequestRepresentationKind: RepresentationsKinds.BATCH
                },
                {
                    title: 'Entity-ActionImport',
                    uriBuilder: () => new UriBuilder(edm).v4().actionImport('AIRTESAllPrimParam'),
                    expectedEdmType: edm.getEntityType(createFqn('ETAllPrim')),
                    expectedResponseRepresentationKind: RepresentationsKinds.ENTITY,
                    expectedRequestRepresentationKind: RepresentationsKinds.ACTION_PARAMETERS,
                    expectedActionParameters: { ParameterDate: EdmPrimitiveTypeKind.Date }
                },
                {
                    title: 'EntityCollection-ActionImport',
                    uriBuilder: () => new UriBuilder(edm).v4().actionImport('AIRTCollESAllPrimParam'),
                    expectedEdmType: edm.getEntityType(createFqn('ETAllPrim')),
                    expectedResponseRepresentationKind: RepresentationsKinds.ENTITY_COLLECTION,
                    expectedRequestRepresentationKind: RepresentationsKinds.ACTION_PARAMETERS,
                    expectedActionParameters: { ParameterTimeOfDay: EdmPrimitiveTypeKind.TimeOfDay }
                },
                {
                    title: 'ComplexType-ActionImport',
                    uriBuilder: () => new UriBuilder(edm).v4().actionImport('AIRTCTTwoPrimParam'),
                    expectedEdmType: edm.getComplexType(createFqn('CTTwoPrim')),
                    expectedResponseRepresentationKind: RepresentationsKinds.COMPLEX,
                    expectedRequestRepresentationKind: RepresentationsKinds.ACTION_PARAMETERS,
                    expectedActionParameters: { ParameterInt16: EdmPrimitiveTypeKind.Int16 }
                },
                {
                    title: 'ComplexTypeCollection-ActionImport',
                    uriBuilder: () => new UriBuilder(edm).v4().actionImport('AIRTCollCTTwoPrimParam'),
                    expectedEdmType: edm.getComplexType(createFqn('CTTwoPrim')),
                    expectedResponseRepresentationKind: RepresentationsKinds.COMPLEX_COLLECTION,
                    expectedRequestRepresentationKind: RepresentationsKinds.ACTION_PARAMETERS,
                    expectedActionParameters: { ParameterInt16: EdmPrimitiveTypeKind.Int16 }
                },
                {
                    title: 'ActionImport',
                    uriBuilder: () => new UriBuilder(edm).v4().actionImport('AIRT'),
                    expectedEdmType: null,
                    expectedResponseRepresentationKind: RepresentationsKinds.NO_CONTENT,
                    expectedRequestRepresentationKind: RepresentationsKinds.ACTION_PARAMETERS,
                    expectedActionParameters: {}
                }
            ];

            for (const test of testdata) {
                testPost(test);
            }
        });

        it('should return NO_CONTENT for httpMethod OPTIONS', () => {
            assert.strictEqual(
                new UriBuilder(edm).v4().entitySet('ESAllPrim').getResponseRepresentationKind('OPTIONS'),
                RepresentationsKinds.NO_CONTENT
            );
        });

        it('should return NO_CONTENT for httpMethod HEAD', () => {
            assert.strictEqual(
                new UriBuilder(edm).v4().entitySet('ESAllPrim').getResponseRepresentationKind('HEAD'),
                RepresentationsKinds.NO_CONTENT
            );
        });
    });
});
