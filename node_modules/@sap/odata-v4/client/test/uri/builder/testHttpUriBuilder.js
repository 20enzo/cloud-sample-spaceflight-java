'use strict';

const HttpUriBuilder = require('../../../lib/uri/builder/HttpUriBuilder');
const assert = require('assert');

describe(__filename, () => {
    describe('should test class HttpUriBuilder', () => {
        describe('should test constructor', () => {
            it('should create an instance of HttpUriBuilder', () => {
                const httpUriBuilder = new HttpUriBuilder();
                assert.ok(httpUriBuilder instanceof HttpUriBuilder);
            });
        });

        describe('it should test adding and replacing pathSegments', () => {
            it('should add a pathSegment via .addPathSegment()', () => {
                const httpUriBuidler = new HttpUriBuilder();
                httpUriBuidler.addPathSegment('test');
                assert.deepEqual(httpUriBuidler.getPathSegments(), ['test']);
            });

            it('should add multiple pathSegments via .addPathSegment()', () => {
                const httpUriBuidler = new HttpUriBuilder();
                httpUriBuidler.addPathSegment('test1');
                httpUriBuidler.addPathSegment('test2');
                assert.deepEqual(httpUriBuidler.getPathSegments(), ['test1', 'test2']);
            });

            it('should the last replace a pathSegment if one exists', () => {
                const httpUriBuidler = new HttpUriBuilder();
                httpUriBuidler.addPathSegment('test1');
                httpUriBuidler.replaceLastSegment('test2');
                assert.deepEqual(httpUriBuidler.getPathSegments(), ['test2']);
            });

            it('should the last replace a pathSegment if multiple exist', () => {
                const httpUriBuidler = new HttpUriBuilder();
                httpUriBuidler.addPathSegment('test1');
                httpUriBuidler.addPathSegment('test2');
                httpUriBuidler.replaceLastSegment('test3');
                assert.deepEqual(httpUriBuidler.getPathSegments(), ['test1', 'test3']);
            });
        });

        describe('should test .setQueryOptions()', () => {
            it('should set and return a queryOption', () => {
                const httpUriBuidler = new HttpUriBuilder();
                httpUriBuidler.setQueryOption('name', 'value');
                assert.strictEqual(httpUriBuidler.getQueryOption('name'), 'value');
            });

            it('should set and return multiple different queryOptions', () => {
                const httpUriBuidler = new HttpUriBuilder();
                httpUriBuidler.setQueryOption('name1', 'value1');
                httpUriBuidler.setQueryOption('name2', 'value2');
                assert.strictEqual(httpUriBuidler.getQueryOption('name1'), 'value1');
                assert.strictEqual(httpUriBuidler.getQueryOption('name2'), 'value2');
            });

            it('should replace an already set queryOption if it exists', () => {
                const httpUriBuidler = new HttpUriBuilder();
                httpUriBuidler.setQueryOption('name', 'value');
                httpUriBuidler.setQueryOption('name', 'other value');
                assert.strictEqual(httpUriBuidler.getQueryOption('name'), 'other value');
            });
        });

        describe('should test setting and using formats', () => {
            it('should set a format and use it in .to()', () => {
                const httpUriBuidler = new HttpUriBuilder();
                httpUriBuidler.setFormat('test', { format: () => 'uri' });
                assert.strictEqual(httpUriBuidler.to('test'), 'uri');
            });

            it('should set multiple formats and use them in .to()', () => {
                const httpUriBuidler = new HttpUriBuilder();
                httpUriBuidler.setFormat('test1', { format: () => 'uri1' });
                httpUriBuidler.setFormat('test2', { format: () => 'uri2' });
                assert.strictEqual(httpUriBuidler.to('test1'), 'uri1');
                assert.strictEqual(httpUriBuidler.to('test2'), 'uri2');
            });

            it('should throw an error if a format is used, that is not set', () => {
                const httpUriBuidler = new HttpUriBuilder();
                assert.throws(() => httpUriBuidler.to('not existing'));
            });
        });
    });
});
