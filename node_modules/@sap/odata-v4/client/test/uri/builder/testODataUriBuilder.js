'use strict';

const HttpUriBuilder = require('../../../lib/uri/builder/HttpUriBuilder');
const ODataUriBuilder = require('../../../lib/uri/builder/ODataUriBuilder');
const assert = require('assert');
const ResourceKind = require('../../../../lib/uri/UriResource').ResourceKind;
const ParameterKind = require('../../../lib/uri/builder/SegmentParameter').ParameterKind;

describe(__filename, () => {

    /**
     * @type {ODataUriBuilder}
     */
    let odataUriBuilder = null;
    let httpUriBuilder = null;
    beforeEach(() => {
        httpUriBuilder = new HttpUriBuilder();
        odataUriBuilder = new ODataUriBuilder(httpUriBuilder);
    });

    describe('should test class ODataUriBuilder', () => {
        describe('should test construction', () => {
            it('should create an instance of ODataUriBuilder', () => {
                assert.ok(odataUriBuilder instanceof ODataUriBuilder);
            });
        });

        describe('should test adding pathSegments', () => {
            it('should add a single PathSegment', () => {
                const kind = ResourceKind.ENTITY;
                const name = 'name';
                odataUriBuilder.addPathSegment(kind, name);
                assert.strictEqual(odataUriBuilder.getLastSegment().getKind(), kind);
                assert.strictEqual(odataUriBuilder.getLastSegment().getName(), name);
            });
            it('should add multiple PathSegments', () => {
                odataUriBuilder.addPathSegment(ResourceKind.ENTITY, 'entity');
                odataUriBuilder.addPathSegment(ResourceKind.PRIMITIVE_PROPERTY, 'property');
                assert.strictEqual(odataUriBuilder.getLastSegment(-1).getKind(), ResourceKind.ENTITY);
                assert.strictEqual(odataUriBuilder.getLastSegment(-1).getName(), 'entity');
                assert.strictEqual(odataUriBuilder.getLastSegment().getKind(), ResourceKind.PRIMITIVE_PROPERTY);
                assert.strictEqual(odataUriBuilder.getLastSegment().getName(), 'property');
            });
        });

        describe('should test adding key predicates and parameter functions', () => {
            it('should add a single key property to a segment', () => {
                odataUriBuilder.addPathSegment(ResourceKind.ENTITY_COLLECTION, 'entity');
                odataUriBuilder.addToSegment(ParameterKind.KEY_PREDICATE, 'key', 'value');
                assert.strictEqual(odataUriBuilder.getLastSegment().getParameters()[0].getParameterKind(),
                    ParameterKind.KEY_PREDICATE);
                assert.strictEqual(odataUriBuilder.getLastSegment().getParameters()[0].getName(), 'key');
                assert.strictEqual(odataUriBuilder.getLastSegment().getParameters()[0].getValue(), 'value');
            });

            it('should add multiple key properties to a segment', () => {
                odataUriBuilder.addPathSegment(ResourceKind.ENTITY_COLLECTION, 'entity');
                odataUriBuilder.addToSegment(ParameterKind.KEY_PREDICATE, 'key1', 'value1');
                odataUriBuilder.addToSegment(ParameterKind.KEY_PREDICATE, 'key2', 'value2');
                assert.strictEqual(odataUriBuilder.getLastSegment().getParameters()[0].getParameterKind(),
                    ParameterKind.KEY_PREDICATE);
                assert.strictEqual(odataUriBuilder.getLastSegment().getParameters()[0].getName(), 'key1');
                assert.strictEqual(odataUriBuilder.getLastSegment().getParameters()[0].getValue(), 'value1');
                assert.strictEqual(odataUriBuilder.getLastSegment().getParameters()[1].getParameterKind(),
                    ParameterKind.KEY_PREDICATE);
                assert.strictEqual(odataUriBuilder.getLastSegment().getParameters()[1].getName(), 'key2');
                assert.strictEqual(odataUriBuilder.getLastSegment().getParameters()[1].getValue(), 'value2');
            });

            it('should add a single function parameter to a segment', () => {
                odataUriBuilder.addPathSegment(ResourceKind.ENTITY_COLLECTION, 'entity');
                odataUriBuilder.addToSegment(ParameterKind.FUNCTION_PARAMETER, 'key', 'value');
                assert.strictEqual(odataUriBuilder.getLastSegment().getParameters()[0].getParameterKind(),
                    ParameterKind.FUNCTION_PARAMETER);
                assert.strictEqual(odataUriBuilder.getLastSegment().getParameters()[0].getName(), 'key');
                assert.strictEqual(odataUriBuilder.getLastSegment().getParameters()[0].getValue(), 'value');
            });

            it('should add multiple function parameters to a segment', () => {
                odataUriBuilder.addPathSegment(ResourceKind.ENTITY_COLLECTION, 'entity');
                odataUriBuilder.addToSegment(ParameterKind.FUNCTION_PARAMETER, 'key1', 'value1');
                odataUriBuilder.addToSegment(ParameterKind.FUNCTION_PARAMETER, 'key2', 'value2');
                assert.strictEqual(odataUriBuilder.getLastSegment().getParameters()[0].getParameterKind(),
                    ParameterKind.FUNCTION_PARAMETER);
                assert.strictEqual(odataUriBuilder.getLastSegment().getParameters()[0].getName(), 'key1');
                assert.strictEqual(odataUriBuilder.getLastSegment().getParameters()[0].getValue(), 'value1');
                assert.strictEqual(odataUriBuilder.getLastSegment().getParameters()[1].getParameterKind(),
                    ParameterKind.FUNCTION_PARAMETER);
                assert.strictEqual(odataUriBuilder.getLastSegment().getParameters()[1].getName(), 'key2');
                assert.strictEqual(odataUriBuilder.getLastSegment().getParameters()[1].getValue(), 'value2');
            });

            it('should add a function parameter and key predicate to a segment', () => {
                odataUriBuilder.addPathSegment(ResourceKind.ENTITY_COLLECTION, 'entity');
                odataUriBuilder.addToSegment(ParameterKind.KEY_PREDICATE, 'key1', 'value1');
                odataUriBuilder.addToSegment(ParameterKind.FUNCTION_PARAMETER, 'key2', 'value2');
                assert.strictEqual(odataUriBuilder.getLastSegment().getParameters()[0].getParameterKind(),
                    ParameterKind.KEY_PREDICATE);
                assert.strictEqual(odataUriBuilder.getLastSegment().getParameters()[0].getName(), 'key1');
                assert.strictEqual(odataUriBuilder.getLastSegment().getParameters()[0].getValue(), 'value1');
                assert.strictEqual(odataUriBuilder.getLastSegment().getParameters()[1].getParameterKind(),
                    ParameterKind.FUNCTION_PARAMETER);
                assert.strictEqual(odataUriBuilder.getLastSegment().getParameters()[1].getName(), 'key2');
                assert.strictEqual(odataUriBuilder.getLastSegment().getParameters()[1].getValue(), 'value2');
            });

            it('should add a v2 function parameter as queryOption', () => {
                odataUriBuilder.addV2FunctionParameter('name', 'value');
                assert.strictEqual(odataUriBuilder.getQueryOption('name'), 'value');
            });
        });

        describe('should test to add query options', () => {
            it('should add a single queryOption', () => {
                odataUriBuilder.setQueryOption('name', 'value');
                assert.strictEqual(odataUriBuilder.getQueryOption('name'), 'value');
                assert.strictEqual(httpUriBuilder.getQueryOption('name'), 'value');
            });

            it('should add multiple queryOptions', () => {
                odataUriBuilder.setQueryOption('name1', 'value1');
                odataUriBuilder.setQueryOption('name2', 'value2');
                assert.strictEqual(odataUriBuilder.getQueryOption('name1'), 'value1');
                assert.strictEqual(httpUriBuilder.getQueryOption('name2'), 'value2');
            });

            it('should override a queryOption if set twice', () => {
                odataUriBuilder.setQueryOption('name1', 'value1');
                odataUriBuilder.setQueryOption('name1', 'value2');
                assert.strictEqual(odataUriBuilder.getQueryOption('name1'), 'value2');
            });

            it('should add a single queryOption via .setOrAppendQueryOption()', () => {
                odataUriBuilder.setOrAppendQueryOption('name', 'value');
                assert.deepStrictEqual(odataUriBuilder.getQueryOption('name'), ['value']);
                assert.strictEqual(httpUriBuilder.getQueryOption('name'), 'value');
            });

            it('should add a value to a queryOption via .setOrAppendQueryOption()', () => {
                odataUriBuilder.setOrAppendQueryOption('name', 'value1');
                odataUriBuilder.setOrAppendQueryOption('name', 'value2');
                assert.deepStrictEqual(odataUriBuilder.getQueryOption('name'), ['value1', 'value2']);
                assert.strictEqual(httpUriBuilder.getQueryOption('name'), 'value1,value2');
            });
        });

        describe('should test getting uri information', () => {

            it('should test getting uri information via a the default ReturnTypeHelper', () => {
                assert.strictEqual(odataUriBuilder.getResponseEdmType(), null);
                assert.strictEqual(odataUriBuilder.getRequestEdmType(), null);
                assert.strictEqual(odataUriBuilder.getResponseRepresentationKind(), null);
                assert.strictEqual(odataUriBuilder.getRequestRepresentationKind(), null);
            });

            it('should test getting uri information via a custom return type helper', () => {
                odataUriBuilder.setReturnTypeHelper({
                    getResponseEdmType: () => { return 'foo'; },
                    getRequestEdmType: () => { return 'bar'; },
                    getResponseRepresentationKind: () => { return 'test'; },
                    getRequestRepresentationKind: () => { return 'something'; },
                });
                assert.strictEqual(odataUriBuilder.getResponseEdmType(), 'foo');
                assert.strictEqual(odataUriBuilder.getRequestEdmType(), 'bar');
                assert.strictEqual(odataUriBuilder.getResponseRepresentationKind(), 'test');
                assert.strictEqual(odataUriBuilder.getRequestRepresentationKind(), 'something');
            });
        });
    });
});
