'use strict';

const assert = require('assert');

const V2ResourceJsonDeserializer = require('../../lib/deserializer/V2ResourceJsonDeserializer');
const DeserializationError = require('../../../lib/errors/DeserializationError');
const TestUtils = require('../../../test/TestUtils');
const names = require('../../../techService/names');

const edm = TestUtils.createEdm();
const etAllPrim = edm.getEntityType(names.entityTypeProviderNames.nameETAllPrim);
const etTwoPrim = edm.getEntityType(names.entityTypeProviderNames.nameETTwoPrim);
const etCompComp = edm.getEntityType(names.entityTypeProviderNames.nameETCompComp);
const etCompAllPrim = edm.getEntityType(names.entityTypeProviderNames.nameETCompAllPrim);

describe(__filename, () => {
    describe('should deserialize entity', () => {
        it('with all properties', () =>
            assert.deepStrictEqual(
                new V2ResourceJsonDeserializer().deserializeEntity(etAllPrim,
                    '{"d":{"__metadata":{"uri":"ESAllPrim(42)","type":"Namespace1_Alias.ETAllPrim",'
                    + '"etag":"W/\\"xyz\\""},'
                    + '"PropertyInt16":32767,"PropertyString":"string","PropertyBoolean":true,'
                    + '"PropertyByte":255,"PropertySByte":127,"PropertyInt32":2147483647,'
                    + '"PropertyInt64":"9223372036854775807",'
                    + '"PropertySingle":"1790000000000","PropertyDouble":"-17900000000000000",'
                    + '"PropertyDecimal":"34","PropertyBinary":"ASNFZ4mrze8=",'
                    + '"PropertyDateTimeOffset":"/Date(987654321000)/",'
                    + '"PropertyGuid":"01234567-89ab-cdef-0123-456789abcdef","PropertyTimeOfDay":"PT11H12M13S",'
                    + '"NavPropertyETTwoPrimOne":{"__deferred":{"uri":"ESAllPrim(42)/NavPropertyETTwoPrimOne"}},'
                    + '"NavPropertyETTwoPrimMany":{"__deferred":{"uri":"ESAllPrim(42)/NavPropertyETTwoPrimMany"}}'
                    + '}}'),
                {
                    value: {
                        '*@odata.id': 'ESAllPrim(42)', '*@odata.type': 'Namespace1_Alias.ETAllPrim',
                        '*@odata.etag': 'xyz',
                        PropertyInt16: 32767, PropertyString: 'string', PropertyBoolean: true,
                        PropertyByte: 255, PropertySByte: 127, PropertyInt32: 2147483647,
                        PropertyInt64: '9223372036854775807',
                        PropertySingle: 1790000000000, PropertyDouble: -17900000000000000, PropertyDecimal: '34',
                        PropertyBinary: Buffer.from([0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF]),
                        PropertyDateTimeOffset: '2001-04-19T04:25:21Z',
                        PropertyGuid: '01234567-89ab-cdef-0123-456789abcdef', PropertyTimeOfDay: '11:12:13'
                    }
                }));

        it('with property with timezone offset', () =>
            assert.deepStrictEqual(
                new V2ResourceJsonDeserializer().deserializeEntity(etAllPrim,
                    '{"d":{"PropertyDateTimeOffset":"/Date(987654321000+0120)/"}}'),
                { value: { PropertyDateTimeOffset: '2001-04-19T04:25:21+02:00' } }));

        it('with property with large timezone offset', () =>
            assert.deepStrictEqual(
                new V2ResourceJsonDeserializer().deserializeEntity(etAllPrim,
                    '{"d":{"PropertyDateTimeOffset":"/Date(987654321000-0750)/"}}'),
                { value: { PropertyDateTimeOffset: '2001-04-19T04:25:21-12:30' } }));

        it('without "d" wrapper', () =>
            assert.deepStrictEqual(
                new V2ResourceJsonDeserializer().deserializeEntity(etAllPrim, '{"PropertyByte":42}'),
                { value: { PropertyByte: 42 } }));

        it('with explicit null value for a property', () =>
            assert.deepStrictEqual(
                new V2ResourceJsonDeserializer().deserializeEntity(etAllPrim, '{"PropertyByte":null}'),
                { value: { PropertyByte: null } }));

        it('with media metadata', () =>
            assert.deepStrictEqual(
                new V2ResourceJsonDeserializer().deserializeEntity(etAllPrim,
                    '{"__metadata":{"edit_media":"ESAllPrim(99)/$value","media_src":"ESAllPrim(99)/$value",'
                    + '"media_etag":"W/\\"abc\\"","content_type":"image/png"}}'),
                {
                    value: {
                        '*@odata.mediaEditLink': 'ESAllPrim(99)/$value',
                        '*@odata.mediaReadLink': 'ESAllPrim(99)/$value',
                        '*@odata.mediaEtag': 'abc',
                        '*@odata.mediaContentType': 'image/png'
                    }
                }));

        it('with expanded navigation properties', () =>
            assert.deepStrictEqual(
                new V2ResourceJsonDeserializer().deserializeEntity(etAllPrim,
                    '{"NavPropertyETTwoPrimOne":{"PropertyString":"abc"},'
                    + '"NavPropertyETTwoPrimMany":{"results":[{"PropertyString":"def"},{"PropertyString":"ghi"}]}}'),
                {
                    value: {
                        NavPropertyETTwoPrimOne: { PropertyString: 'abc' },
                        NavPropertyETTwoPrimMany: [{ PropertyString: 'def' }, { PropertyString: 'ghi' }]
                    }
                }));
    });

    describe('should throw error on deserializing wrong entity', () => {
        function testError(input, message) {
            assert.throws(() => new V2ResourceJsonDeserializer().deserializeEntity(etAllPrim, input),
                error => error instanceof DeserializationError && error.message === message);
        }

        it('with wrong wrapper', () =>
            testError('{"d":{"PropertyByte":42},"e":null}',
                "'d' does not exist in type 'com.odata.v4.technical.scenario.ETAllPrim'."));

        it('with non-object', () =>
            testError('{"d":42}', 'Value for structural property must be an object.'));

        it('with not existing property', () =>
            testError('{"wrong":42}', "'wrong' does not exist in type 'com.odata.v4.technical.scenario.ETAllPrim'."));

        it('with no property', () =>
            testError('{}', "Value for type 'com.odata.v4.technical.scenario.ETAllPrim' has no properties."));

        it('with null value for non-nullable property', () =>
            testError('{"PropertyInt16":null}',
                "The property 'PropertyInt16' is not nullable and must not have a null value."));

        it('with wrong value for navigation property', () =>
            testError('{"PropertyInt16":1,"NavPropertyETTwoPrimMany":null}',
                'Value for navigation property must be an object.'));

        it('with unknown metadata property', () =>
            testError('{"__metadata":{"wrong":"1"}}',
                "Unknown metadata tag 'wrong'. "
                + "Only 'uri', 'type', 'etag', 'edit_media', 'media_src', 'media_etag', 'content_type' are allowed."));

        it('with wrong metadata property', () =>
            testError('{"__metadata":{"etag":1}}', "Malformed metadata information 'etag'."));

        it('with wrong etag value', () =>
            testError('{"__metadata":{"etag":","}}', "Malformed ETag value ','."));
    });

    describe('should deserialize entity set', () => {
        it('empty', () =>
            assert.deepStrictEqual(
                new V2ResourceJsonDeserializer().deserializeEntityCollection(etTwoPrim, '{"d":{"results":[]}}'),
                { value: [] }));

        it('empty without "d" wrapper', () =>
            assert.deepStrictEqual(
                new V2ResourceJsonDeserializer().deserializeEntityCollection(etTwoPrim, '{"results":[]}'),
                { value: [] }));

        it('with two entities', () =>
            assert.deepStrictEqual(
                new V2ResourceJsonDeserializer().deserializeEntityCollection(etTwoPrim,
                    '{"results":[{"PropertyInt16":1},{"PropertyInt16":2,"PropertyString":"abc"}]}'),
                { value: [{ PropertyInt16: 1 }, { PropertyInt16: 2, PropertyString: 'abc' }] }));

        it('with count and next link', () =>
            assert.deepStrictEqual(
                new V2ResourceJsonDeserializer().deserializeEntityCollection(etTwoPrim,
                    '{"__count":"5","results":[{"PropertyInt16":1}],"__next":"some URL"}'),
                { '*@odata.count': 5, value: [{ PropertyInt16: 1 }], '*@odata.nextLink': 'some URL' }));
    });

    describe('should throw error on deserializing wrong entity set', () => {
        function testError(input, message) {
            assert.throws(() => new V2ResourceJsonDeserializer().deserializeEntityCollection(etTwoPrim, input),
                error => error instanceof DeserializationError && error.message === message);
        }

        it('with non-object', () =>
            testError('{"d":42}', 'Value for the collection must be an object.'));

        it('with wrong top-level element', () =>
            testError('{"result":[],"wrong":null}',
                "Only 'results', '__count', and '__next' are allowed in the collection value."));

        it('without "results"', () =>
            testError('{"__next":"URL"}',
                "Input must be a collection of type 'com.odata.v4.technical.scenario.ETTwoPrim'."));

        it('with an entity having a null value for a non-nullable property', () =>
            testError('{"results":[{"PropertyInt16":1},{"PropertyInt16":null,"PropertyString":"abc"}]}',
                "The property 'PropertyInt16' is not nullable and must not have a null value."));

        it('with wrong count', () =>
            testError('{"__count":true,"results":[]}', 'An error occurred during deserialization of the collection.'));
    });

    describe('should deserialize primitive property', () => {
        it('with non-null value', () =>
            assert.deepStrictEqual(
                new V2ResourceJsonDeserializer()
                    .deserializePrimitiveProperty(etAllPrim.getProperty('PropertyInt16'), '{"PropertyInt16":99}'),
                { value: 99 }));

        it('with unconventional time value', () =>
            assert.deepStrictEqual(
                new V2ResourceJsonDeserializer()
                    .deserializePrimitiveProperty(etAllPrim.getProperty('PropertyTimeOfDay'),
                        '{"PropertyTimeOfDay":"PT43201S"}'),
                { value: '12:00:01' }));

        it('with not-a-number double value', () =>
            assert.ok(Number.isNaN(
                new V2ResourceJsonDeserializer()
                    .deserializePrimitiveProperty(etAllPrim.getProperty('PropertyDouble'), '{"PropertyDouble":"Nan"}')
                    .value)));

        it('with infinity double value', () =>
            assert.deepStrictEqual(
                new V2ResourceJsonDeserializer()
                    .deserializePrimitiveProperty(etAllPrim.getProperty('PropertyDouble'), '{"PropertyDouble":"INF"}'),
                { value: Number.POSITIVE_INFINITY }));

        it('with negative infinity single value', () =>
            assert.deepStrictEqual(
                new V2ResourceJsonDeserializer()
                    .deserializePrimitiveProperty(etAllPrim.getProperty('PropertySingle'), '{"PropertySingle":"-INF"}'),
                { value: Number.NEGATIVE_INFINITY }));

        it('with null value', () =>
            assert.deepStrictEqual(
                new V2ResourceJsonDeserializer()
                    .deserializePrimitiveProperty(etAllPrim.getProperty('PropertyByte'), '{"PropertyByte":null}'),
                { value: null }));
    });

    describe('should throw error on deserializing wrong primitive property', () => {
        function testError(propertyName, input, message) {
            assert.throws(
                () => new V2ResourceJsonDeserializer().deserializePrimitiveProperty(
                    etAllPrim.getProperty(propertyName), input),
                error => error instanceof DeserializationError
                    && (error.message === message || error.getRootCause().message === message));
        }

        it('with non-object', () =>
            testError('PropertyByte', '{"d":42}', 'Value for property must be an object.'));

        it('with not existing property', () =>
            testError('PropertyDateTimeOffset', '{"wrong":42}',
                "Only 'PropertyDateTimeOffset' is allowed in property value."));

        it('with wrong value', () =>
            testError('PropertyDateTimeOffset', '{"PropertyDateTimeOffset":"/Date(123+01:30)/"}',
                'Invalid value /Date(123+01:30)/ for property PropertyDateTimeOffset'));

        it('with JSON number for Edm.Int64 value', () =>
            testError('PropertyInt64', '{"PropertyInt64":123456789012345}',
                'Invalid value: 123456789012345. '
                + "A JSON string must be specified as value for property 'PropertyInt64'."));

        it('with JSON number for Edm.Double value', () =>
            testError('PropertyDouble', '{"PropertyDouble":123}',
                "Invalid value: 123. A JSON string must be specified as value for property 'PropertyDouble'."));

        it('with facet-violating value for date-time property', () =>
            testError('PropertyDateTimeOffset', '{"PropertyDateTimeOffset":"/Date(987654321098)/"}',
                'Invalid value: 2001-04-19T04:25:21.098Z. '
                + 'The number of milliseconds does not correspond to the Precision facet value 0'));

        it('with facet-violating value for time property', () =>
            testError('PropertyTimeOfDay', '{"PropertyTimeOfDay":"PT1H2M3.4S"}',
                'Invalid value: 01:02:03.4. '
                + 'The number of milliseconds does not correspond to the Precision facet value 0'));

        it('with null value for non-nullable property', () =>
            testError('PropertyInt16', '{"PropertyInt16":null}',
                "The property 'PropertyInt16' is not nullable and must not have a null value."));
    });

    describe('should deserialize complex property', () => {
        it('with values', () =>
            assert.deepStrictEqual(
                new V2ResourceJsonDeserializer()
                    .deserializeComplexProperty(etCompComp.getProperty('PropertyComp'),
                        '{"PropertyComp":{"PropertyComp":{"PropertyInt16":99,"PropertyString":"abc"}}}'),
                { value: { PropertyComp: { PropertyInt16: 99, PropertyString: 'abc' } } }));

        it('with null value', () =>
            assert.deepStrictEqual(
                new V2ResourceJsonDeserializer().deserializeComplexProperty(etCompComp.getProperty('PropertyComp'),
                    '{"PropertyComp":null}'),
                { value: null }));

        it('with time property with fractional seconds', () =>
            assert.deepStrictEqual(
                new V2ResourceJsonDeserializer()
                    .deserializeComplexProperty(etCompAllPrim.getProperty('PropertyComp'),
                        '{"PropertyComp":{"PropertyTimeOfDay":"PT1H2M3.01234567S"}}'),
                { value: { PropertyTimeOfDay: '01:02:03.01234567' } }));
    });
});
