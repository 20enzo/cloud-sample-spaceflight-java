const sinon = require('sinon');
const assert = require('assert');
const fs = require('fs');
const TestUtils = require('../../../../test/TestUtils');
const MetadataConverter = require('../../../lib/converter/MetadataConverter');
const MetadataConverterFactory = require('../../../lib/converter/MetadataConverterFactory');

describe(__filename, () => {
    describe('MetadataConverterFactory', () => {

        TestUtils.temporaryAllowUnsupportedFeatures();

        describe('.create()', () => {

            it('should create instance of MetadataConverter', () => {
                assert.ok(MetadataConverterFactory.create() instanceof MetadataConverter);
            });

            it('should throw an error if no converter is available', () => {
                assert.throws(() => {
                    MetadataConverterFactory.create('wrong converter');
                }, /No converter available for 'wrong converter'/);
            });

        });

        describe('.addConversion(name, strategies).execute(name, input, callback)', () => {

            it('should convert full-edmx.xml metadata xml without default AST factory', (done) => {

                const sourceFile1 = __dirname + '/../../resources/full-edmx.xml';
                const sourceFile2 = __dirname + '/../../resources/full-edmx-referenced-1.xml';
                const sourceFile3 = __dirname + '/../../resources/full-edmx-referenced-2.xml';

                const createAst = (file) => {
                    const metadataXml = fs.readFileSync(file);
                    return MetadataConverterFactory.createAbstractSyntaxTree(metadataXml);
                };

                const mainInput = createAst(sourceFile1);

                MetadataConverterFactory
                    .createOdata40XmlTo40Json({
                        metadataFactory: (typeFqn, callback) => {
                            if (typeFqn.startsWith('com.odata.v4.technical.scenario.external2')) {
                                return callback(null, createAst(sourceFile3));
                            }
                            if (typeFqn.startsWith('com.odata.v4.technical.scenario.external')) {
                                return callback(null, createAst(sourceFile2));
                            }
                            return callback(new Error(`External '${typeFqn}' not found`));
                        },
                        logger: { path() { }, info() { }, warn() { }, debug() { } },
                        nodeFactory: (element) => { return element; },
                        ignore: ['http://docs.oasis-open.org/odata/ns/edmx:IncludeAnnotations'],
                        strategy: (strategy) => strategy
                    })
                    .execute(mainInput, (error1, generatedCsdlJson) => {
                        if (error1) return done(error1);
                        try {
                            assert.ok(generatedCsdlJson['com.odata.v4.technical.scenario'] != null);
                            return done();
                        } catch (assertationError) {
                            return done(assertationError);
                        }
                    });

            });


            it('should convert full-edmx.xml metadata xml with default AST factory', (done) => {

                const spy = sinon.spy();

                const sourceFile1 = __dirname + '/../../resources/full-edmx.xml';
                const sourceFile2 = __dirname + '/../../resources/full-edmx-referenced-1.xml';
                const sourceFile3 = __dirname + '/../../resources/full-edmx-referenced-2.xml';

                const mainInput = fs.readFileSync(sourceFile1).toString();

                MetadataConverterFactory
                    .createOdata40XmlTo40Json({
                        metadataFactory: (typeFqn, callback) => {
                            if (typeFqn.startsWith('com.odata.v4.technical.scenario.external2')) {
                                return callback(null, fs.readFileSync(sourceFile3).toString());
                            }
                            if (typeFqn.startsWith('com.odata.v4.technical.scenario.external')) {
                                return callback(null, fs.readFileSync(sourceFile2).toString());
                            }
                            return callback(new Error(`External '${typeFqn}' not found`));
                        },
                        logger: { path() { }, info() { }, warn() { }, debug() { } },
                        nodeFactory: (element) => element,
                        astFactory: (metadataString) => {
                            spy(); // Should be called 4 times
                            return MetadataConverterFactory.createAbstractSyntaxTree(metadataString);
                        },
                        ignore: ['http://docs.oasis-open.org/odata/ns/edmx:IncludeAnnotations'],
                        strategy: (strategy) => strategy,
                    })
                    .execute(mainInput, (error1, generatedCsdlJson) => {
                        if (error1) return done(error1);
                        try {
                            assert.equal(spy.callCount, 4);
                            assert.ok(generatedCsdlJson['com.odata.v4.technical.scenario'] != null);
                            return done();
                        } catch (assertationError) {
                            return done(assertationError);
                        }
                    });

            });

        });

    });

});
