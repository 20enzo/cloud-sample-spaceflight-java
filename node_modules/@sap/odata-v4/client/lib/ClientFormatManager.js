const ClientDeserializerFactory = require('./deserializer/ClientDeserializerFactory');
const ClientSerializerFactory = require('./serializer/ClientSerializerFactory');


const APPLICATION_JSON = /application\/json/;
const APPLICATION_XML = /application\/xml/;
const TEXT_PLAIN = /text\/plain/;

class ClientFormatManager {

    getSerializer(odataRequest) {
        const resourcePath = odataRequest.getOptions().url;
        const representationKind = odataRequest.getOptions().requestRepresentationKind;
        const edmType = odataRequest.getOptions().requestEdmType;
        const edm = odataRequest.getOptions().edm;
        const method = odataRequest.getRequestOptions().method;
        const contentType = odataRequest.getRequestOptions().headers['Content-Type'];
        const odataVersion = odataRequest.getOptions().OdataVersion;
        const body = odataRequest.getRequestOptions().body;

        return this._createSerializer(
            edm, method, resourcePath, body, odataVersion, contentType, edmType, representationKind
        );

    }

    _createSerializer(
        edm, method, resourcePath, body, odataVersion, contentType, edmType, representationKind
    ) {
        if (APPLICATION_JSON.test(contentType)) {
            return this._createJsonSerializer(
                edm, odataVersion, method, resourcePath, contentType, body, edmType,
                representationKind
            );
        }
        if (TEXT_PLAIN.test(contentType) || APPLICATION_XML.test(contentType)) {
            return () => {
                return body;
            };
        }

        throw new Error(`Serialize Content-Type of '${contentType.split(';')[0]}' is not supported`);
    }

    _createJsonSerializer(
        edm, odataVersion, method, odataResourcePath, contentType, rawBody, edmType, representationKind
    ) {

        if (odataVersion === '2.0') {
            return ClientSerializerFactory.createJsonV2Serializer(edmType, representationKind, rawBody);
        }

        throw new Error(`Serialize with odata version '${odataVersion}' is not supported`);
    }


    getDeserializer(odataResponse) {
        const resourcePath = odataResponse.getRequest().getOptions().url;
        const representationKind = odataResponse.getRequest().getOptions().responseRepresentationKind;
        const edmType = odataResponse.getRequest().getOptions().responseEdmType;
        const edm = odataResponse.getRequest().getOptions().edm;
        const contentType = odataResponse.getHeader('content-type');
        const odataVersion = odataResponse.getHeader('odata-version') || odataResponse.getHeader('dataserviceversion');
        const method = odataResponse.getRequest().getRequestOptions().method;
        const rawBody = odataResponse.getRawBody();

        const deserializer = this._createDeserializer(
            edm, method, resourcePath, rawBody, odataVersion, contentType, edmType, representationKind
        );

        return deserializer;
    }

    _createDeserializer(
        edm, method, resourcePath, rawBody, odataVersion, contentType, edmType, representationKind
    ) {
        if (APPLICATION_JSON.test(contentType)) {
            return this._createJsonDeserializer(
                edm, odataVersion, method, resourcePath, contentType, rawBody, edmType,
                representationKind
            );
        }
        if (TEXT_PLAIN.test(contentType) || APPLICATION_XML.test(contentType)) {
            return () => {
                return rawBody;
            };
        }

        throw new Error(`Deserialize Content-Type of '${contentType}' is not supported`);
    }

    _createJsonDeserializer(
        edm, odataVersion, method, odataResourcePath, contentType, rawBody, edmType, representationKind
    ) {
        if (odataVersion === '2.0') {
            return ClientDeserializerFactory.createJsonV2Deserializer(edmType, representationKind, rawBody);
        }

        throw new Error(`Deserialize with odata version '${odataVersion}' is not supported`);
    }

}

module.exports = ClientFormatManager;
