const xmljs = require('xml-js');
const MetadataConverter = require('./MetadataConverter');

class MetadataConverterFactory {

    static createAbstractSyntaxTree(xmlString) {
        return JSON.parse(
            xmljs.xml2json(xmlString, { compact: false })
        );
    }

    static create(target = '4.0:xml -> 4.0:json', options) {
        const targetToLower = target.toLowerCase();
        const result = targetToLower.split('->')
            .map(elem => elem.trim())
            .map(elem => elem.split(':'))
            .map((elem) => elem.map((name) => name.charAt(0).toUpperCase() + name.substring(1)))
            .reduce((seed, current) => {
                const [version, format] = current;
                return (`${seed}${version}${format}To`).replace('.', '');
            }, 'createOdata')
            .slice(0, -2);

        const method = result.charAt(0).toLowerCase() + result.substring(1);
        if (MetadataConverterFactory[method] == null) throw new Error(`No converter available for '${target}'`);
        return MetadataConverterFactory[method](options);
    }


    static createOdata40XmlTo40Json(options = {}) {
        const defaultStrategy = MetadataConverter.createOdataV4MetadataXmlToOdataV4CsdlStrategy();

        if (options.astFactory) {
            defaultStrategy.setASTFactory(options.astFactory);
        } else {
            defaultStrategy.setASTFactory((metadata) => {
                return MetadataConverterFactory.createAbstractSyntaxTree(metadata);
            });
        }

        if (options.metadataFactory) defaultStrategy.setMetadataFactory(options.metadataFactory);
        if (options.nodeFactory) defaultStrategy.setXmlNodeFactory(options.nodeFactory);
        if (options.logger) defaultStrategy.setLogger(options.logger);

        if (options.ignore) {
            options.ignore.forEach((nodePrefixAndName) => {
                defaultStrategy.use(nodePrefixAndName, () => null);
            });
        }

        return new MetadataConverter().addConversion([defaultStrategy]);

    }
}

module.exports = MetadataConverterFactory;

MetadataConverterFactory.create();
