'use strict';

const AbstractValueEncoder = require('./AbstractValueEncoder');
const ValueConverter = require('../../../lib/utils/ValueConverter');
const ValueValidator = require('../../../lib/validator/ValueValidator');

const JsonContentTypeInfo = require('../../../lib/format/JsonContentTypeInfo');
const EdmPrimitiveTypeKind = require('../../../lib/edm/EdmPrimitiveTypeKind');

class V4JsonLiteralEncoder extends AbstractValueEncoder {

    /**
     * @param {boolean} ieee754Compatible Set to true, if Decimal and Int64 shall be encoded as string
     */
    constructor(ieee754Compatible = false) {
        super();
        this._converter = new ValueConverter(new ValueValidator(), new JsonContentTypeInfo()
            .addParameter(JsonContentTypeInfo.FormatParameter.IEEE754, ieee754Compatible ? 'true' : 'false'));
    }

    /**
     *
     * @inheritDoc
     * @return {boolean|number|string|null}
     */
    encode(value, type) {
        if (!type) return value;
        switch (type) {
            case EdmPrimitiveTypeKind.Decimal:
                return this._converter.convertDecimal(value);
            case EdmPrimitiveTypeKind.TimeOfDay:
                return this._converter.convertTimeOfDay(value);
            case EdmPrimitiveTypeKind.DateTimeOffset:
                return this._converter.convertDateTimeOffset(value);
            case EdmPrimitiveTypeKind.Duration:
                return this._converter.convertDuration(value);
            default:
                return this._converter.convert(type, value);
        }

    }
}

module.exports = V4JsonLiteralEncoder;
