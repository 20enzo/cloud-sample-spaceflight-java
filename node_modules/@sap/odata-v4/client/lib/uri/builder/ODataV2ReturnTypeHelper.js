'use strict';
const AbstractReturnTypeHelper = require('./AbstractReturnTypeHelper');
const RepresentationKind = require('../../../../lib/format/RepresentationKind');
const ResourceKind = require('../../../../lib/uri/UriResource').ResourceKind;
const EdmTypeKind = require('../../../../lib/edm/EdmType').TypeKind;

class ODataV2ReturnTypeHelper extends AbstractReturnTypeHelper {

    /**
     * @inheritDoc
     * @return {RepresentationKind.Kinds}
     */
    getResponseRepresentationKind(segments, httpMethod) {

        if (httpMethod && (httpMethod.toLocaleLowerCase() === 'options' || httpMethod.toLocaleLowerCase() === 'head')) {
            return RepresentationKind.Kinds.NO_CONTENT;
        }

        if (segments.length > 2 && segments[segments.length - 2].getKind() === ResourceKind.REF) {
            return (segments[segments.length - 1].getKind() === ResourceKind.NAVIGATION_TO_MANY)
                ? RepresentationKind.Kinds.REFERENCE_COLLECTION : RepresentationKind.Kinds.REFERENCE;
        }

        if (segments.length > 1 && segments[segments.length - 1].getKind() === ResourceKind.VALUE) {
            const previousSegment = segments[segments.length - 2];
            if (previousSegment.getKind() === ResourceKind.ENTITY
                || previousSegment.getKind() === ResourceKind.NAVIGATION_TO_ONE
                || (previousSegment.getKind() === ResourceKind.FUNCTION_IMPORT
                    && previousSegment.getEdmType().getKind() === EdmTypeKind.ENTITY && !previousSegment.isCollection())
            ) {
                return RepresentationKind.Kinds.BINARY;
            }
        }

        let finalEdmType = this.getFinalEdmType(segments);
        finalEdmType = (finalEdmType && finalEdmType.getType) ? finalEdmType.getType() : finalEdmType;

        const uriInfo = {
            getLastSegment: () => segments[segments.length - 1],
            getFinalEdmType: () => finalEdmType
        };
        return RepresentationKind.getResponseRepresentationKind(uriInfo, httpMethod);
    }

    /**
     * @inheritDoc
     * @return {RepresentationKind.Kinds}
     */
    getRequestRepresentationKind(segments, httpMethod) {

        const uriInfo = {
            getLastSegment: () => segments[segments.length - 1],
            getFinalEdmType: () => this.getFinalEdmType(segments)
        };
        return RepresentationKind.getRequestRepresentationKind(uriInfo, httpMethod);
    }

    getRequestEdmType(segments) {
        return this.getFinalEdmArtifact(segments);
    }

    getResponseEdmType(segments) {
        return this.getFinalEdmArtifact(segments);
    }
}

module.exports = ODataV2ReturnTypeHelper;
