'use strict';
const AbstractUriPartBuilder = require('./AbstractUriPartBuilder');
const ResourceKind = require('../../../../lib/uri/UriResource').ResourceKind;
const QueryOptions = require('../../../../lib/uri/UriInfo').QueryOptions;

class ODataV2UriPartBuilder extends AbstractUriPartBuilder {

    /**
     * @inheritDoc
     * @return {string}
     */
    buildSegment(segmentInformation) {

        switch (segmentInformation.getKind()) {
            case ResourceKind.FUNCTION_IMPORT:
            case ResourceKind.ENTITY_COLLECTION:
            case ResourceKind.ENTITY:
            case ResourceKind.NAVIGATION_TO_MANY:
            case ResourceKind.NAVIGATION_TO_ONE:
                return this._buildEntitySegment(segmentInformation);
            case ResourceKind.COUNT:
                return '$count';
            case ResourceKind.VALUE:
                return '$value';
            case ResourceKind.REF:
                return '$links';
            case ResourceKind.COMPLEX_PROPERTY:
            case ResourceKind.PRIMITIVE_PROPERTY:
            default:
                return segmentInformation.getName();
        }
    }

    /**
     * @param {SegmentInfo} segmentInformation
     * @return {string}
     * @private
     */
    _buildEntitySegment(segmentInformation) {
        const keys = segmentInformation.getParameters();
        return segmentInformation.getName() + (keys.length > 0 ? this._buildKeys(keys) : '');
    }

    _buildKeys(keys) {
        let keyString = '(';
        keyString += keys.map(key => {
            let name = key.getName();
            let value = key.getValue();
            return name ? name + '=' + value : value;
        }).join(',');
        keyString += ')';
        return keyString;
    }

    /**
     * @inheritDoc
     * @return {{name: QueryOptions|string, value: string}}
     */
    buildQueryOption(option, value) {
        switch (option) {
            case QueryOptions.ORDERBY:
                return { name: option, value: this._buildOrderby(value) };
            case QueryOptions.SELECT:
                return { name: option, value: this._buildSelect(value) };
            case QueryOptions.COUNT:
                return { name: '$inlinecount', value: this._buildCount(value) };
            default:
                return { name: option, value: value.toString() };
        }
    }

    /**
     * @param {object[]} values
     * @return {string}
     * @private
     */
    _buildOrderby(values) {
        return values.map(value => {
            let orderbyString = value.expression;
            orderbyString += value.direction ? ' ' + value.direction : '';
            return orderbyString;
        }).join(',');
    }

    /**
     * @param {string[]} values
     * @return {string}
     * @private
     */
    _buildSelect(values) {
        return values.join(',');
    }

    /**
     * @param value
     * @return {string}
     * @private
     */
    _buildCount(value) {
        if (value != null && typeof value !== 'boolean') {
            throw new Error('Value for queryoption $count must be a boolean');
        }
        if (value === false) return 'none';
        return 'allpages';
    }
}

module.exports = ODataV2UriPartBuilder;
