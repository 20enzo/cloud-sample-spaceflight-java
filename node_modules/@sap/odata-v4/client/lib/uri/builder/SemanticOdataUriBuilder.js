'use strict';

const QueryOptions = require('../../../../lib/uri/UriInfo').QueryOptions;

class SemanticOdataUriBuilder {

    /**
     * @param {ODataUriBuilder} odataUriBuilder
     */
    constructor(odataUriBuilder) {
        this._odataUriBuilder = odataUriBuilder;
    }

    /**
     * @return {AbstractEdmOperation|EdmType}
     */
    getRequestEdmType() {
        return this._odataUriBuilder.getRequestEdmType();
    }

    /**
     * @return {EdmType}
     */
    getResponseEdmType() {
        return this._odataUriBuilder.getResponseEdmType();
    }

    /**
     * @param {HttpMethod.Methods} [httpMethod]
     * @return {RepresentationKind.Kinds}
     */
    getResponseRepresentationKind(httpMethod) {
        return this._odataUriBuilder.getResponseRepresentationKind(httpMethod);
    }

    /**
     * @param {HttpMethod.Methods} [httpMethod]
     * @return {RepresentationKind.Kinds}
     */
    getRequestRepresentationKind(httpMethod) {
        return this._odataUriBuilder.getRequestRepresentationKind(httpMethod);
    }

    /**
     *
     * @param {string} name
     * @param {string} value
     * @return {SemanticOdataUriBuilder}
     */
    query(name, value) {
        this._odataUriBuilder.setQueryOption(name, value);
        return this;
    }

    /**
     * @param {number} top
     * @return {SemanticOdataUriBuilder}
     */
    top(top) {
        this._odataUriBuilder.setQueryOption(QueryOptions.TOP, top);
        return this;
    }

    /**
     * @param {number} skip
     * @return {SemanticOdataUriBuilder}
     */
    skip(skip) {
        this._odataUriBuilder.setQueryOption(QueryOptions.SKIP, skip);
        return this;
    }

    /**
     * @return {SemanticOdataUriBuilder}
     */
    inlineCount(value) {
        this._odataUriBuilder.setQueryOption(QueryOptions.COUNT, value);
        return this;
    }

    /**
     * @param {string} expand
     * @return {SemanticOdataUriBuilder}
     */
    expand(expand) {
        this._odataUriBuilder.setQueryOption(QueryOptions.EXPAND, expand);
        return this;
    }

    /**
     * @param {string} format
     * @return {SemanticOdataUriBuilder}
     */
    format(format) {
        this._odataUriBuilder.setQueryOption(QueryOptions.FORMAT, format);
        return this;
    }

    /**
     * @param {string} filter
     * @return {SemanticOdataUriBuilder}
     */
    filter(filter) {
        this._odataUriBuilder.setQueryOption(QueryOptions.FILTER, filter);
        return this;
    }

    /**
     * @param {string} selectProperty
     * @return {SemanticOdataUriBuilder}
     */
    select(selectProperty) {
        this._odataUriBuilder.setOrAppendQueryOption(QueryOptions.SELECT, selectProperty);
        return this;
    }

    /**
     * @param {string} orderbyExpression
     * @param {string} [orderbyDirection]
     * @return {SemanticOdataUriBuilder}
     */
    orderby(orderbyExpression, orderbyDirection) {
        const orderbyValue = { expression: orderbyExpression, direction: orderbyDirection };
        this._odataUriBuilder.setOrAppendQueryOption(QueryOptions.ORDERBY, orderbyValue);
        return this;
    }

    /**
     * @return {string}
     */
    getUrl() {
        return this._odataUriBuilder.toString();
    }

    /**
     * @return {string}
     */
    getOdataVersion() {
        return this._odataUriBuilder.getOdataVersion();
    }

    /**
     * @return {EdmProvider}
     */
    getEdm() {
        return this._odataUriBuilder.getEdm();
    }
}

module.exports = SemanticOdataUriBuilder;
