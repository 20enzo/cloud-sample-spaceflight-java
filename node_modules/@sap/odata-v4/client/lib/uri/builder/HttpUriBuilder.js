'use strict';

class HttpUriBuilder {

    constructor() {
        this._pathSegments = [];
        this._queryOptions = new Map();
        this._formats = new Map();
    }

    /**
     * Adds a path segment to the uri
     * @param {string} segment
     */
    addPathSegment(segment) {
        this._pathSegments.push(segment);
    }

    /**
     * @param {string} segment
     */
    replaceLastSegment(segment) {
        if (this._pathSegments.length > 0) this._pathSegments[this._pathSegments.length - 1] = segment;
    }

    /**
     * @return {string[]}
     */
    getPathSegments() {
        return this._pathSegments;
    }

    /**
     * Sets a query option
     * @param {string} name Name of the query option
     * @param {string} value Value of the query option
     */
    setQueryOption(name, value) {
        this._queryOptions.set(name, value);
    }

    /**
     * @param {string} name
     * @return {string}
     */
    getQueryOption(name) {
        return this._queryOptions.get(name);
    }

    /**
     * Registers a formatter for the uri
     * @param {string} format
     * @param {AbstractUriFormatter} formatter
     */
    setFormat(format, formatter) {
        this._formats.set(format, formatter);
    }

    /**
     * Formats the uri information with a formatter and returns the result
     * @param {string} format
     */
    to(format) {
        const formatter = this._formats.get(format);
        if (!formatter) {
            throw new Error(`No formatter found for format "${format}"`);
        }
        return formatter.format(this._pathSegments, this._queryOptions);
    }

}

module.exports = HttpUriBuilder;
