'use strict';
const ParameterKind = require('./SegmentParameter').ParameterKind;
const ResourceKind = require('../../../../lib/uri/UriResource').ResourceKind;
class SegmentInfo {

    /**
     * @param {UriResource.ResourceKind} kind
     * @param {string} name
     */
    constructor(kind, name) {
        this._kind = kind;
        this._name = name;
        this._parameters = [];

        /**
         * This represenets the EdmEntitySet of the current Segment (if applicable)
         * @type {AbstractEdmBindingTarget|null}
         * @private
         */
        this._edmBindingTarget = null;
        /**
         * This represents the AbstractEdmOperation of the current Segment (if applicable)
         * @type {AbstractEdmOperation|null}
         * @private
         */
        this._edmOperation = null;
        /**
         * This represents the EdmType of the current Segment (if applicable)
         * @type {EdmType|null}
         * @private
         */
        this._edmType = null;
        /**
         * True, if the segment returns a collection, false if not, null if unknown
         * @type {boolean|null}
         * @private
         */
        this._isCollection = null;

        this._remainingKeyPredicates = new Map();
        this._remainingFunctionParameters = new Map();
    }

    /**
     * @param {SegmentParameter} segmentParameter
     */
    addParameter(segmentParameter) {
        this._parameters.push(segmentParameter);
        if (segmentParameter.getParameterKind() === ParameterKind.KEY_PREDICATE) {
            this.setIsCollection(false);
            switch (this._kind) {
                case ResourceKind.ENTITY_COLLECTION:
                    this._kind = ResourceKind.ENTITY;
                    break;
                case ResourceKind.NAVIGATION_TO_MANY:
                    this._kind = ResourceKind.NAVIGATION_TO_ONE;
                    break;
                default:
                    break;
            }
        }
    }

    /**
     * @return {SegmentParameter[]}
     */
    getParameters() {
        return this._parameters;
    }

    /**
     * @return {string}
     */
    getName() {
        return this._name;
    }

    /**
     * @return {UriResource.ResourceKind}
     */
    getKind() {
        return this._kind;
    }

    /**
     * @param {AbstractEdmBindingTarget} edmEntitySet
     */
    setEdmBindingTarget(edmEntitySet) {
        this._edmBindingTarget = edmEntitySet;
        if (edmEntitySet) this._edmType = edmEntitySet.getEntityType();
    }

    /**
     * @param {AbstractEdmOperation} edmOperation
     */
    setEdmOperation(edmOperation) {
        this._edmOperation = edmOperation;
    }

    /**
     * @param {EdmType} edmType
     */
    setEdmType(edmType) {
        this._edmType = edmType;
    }

    /**
     * @param {boolean} isCollection
     */
    setIsCollection(isCollection) {
        this._isCollection = isCollection;
    }
    /**
     * @return {EdmEntitySet|null}
     */
    getEdmBindingTarget() {
        return this._edmBindingTarget;
    }

    /**
     * @return {AbstractEdmOperation|null}
     */
    getEdmOperation() {
        return this._edmOperation;
    }

    /**
     * @return {EdmType|null}
     */
    getEdmType() {
        return this._edmType;
    }

    /**
     * @return {boolean|null}
     */
    isCollection() {
        return this._isCollection;
    }

    /**
     * @param {Map} parameterMap
     */
    setRemainingKeyParameters(parameterMap) {
        this._remainingKeyPredicates = new Map(parameterMap);
    }

    /**
     * @return {Map}
     */
    getRemainingKeyParameters() {
        return this._remainingKeyPredicates;
    }

    /**
     * @param {Map} parameterMap
     */
    setRemainingFunctionParameters(parameterMap) {
        this._remainingFunctionParameters = new Map(parameterMap);
    }

    /**
     * @return {Map}
     */
    getRemainingFunctionParameters() {
        return this._remainingFunctionParameters;
    }
}

module.exports = SegmentInfo;
