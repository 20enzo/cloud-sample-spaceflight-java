'use strict';
const StringFormatter = require('./StringFormatter');
const SegmentParameter = require('./SegmentParameter');
const SegmentInfo = require('./SegmentInfo');
const HttpMethods = require('../../../../lib/http/HttpMethod').Methods;
const ResourceKind = require('../../../../lib/uri/UriResource').ResourceKind;
const ParameterKind = SegmentParameter.ParameterKind;
const AbstractUriPartBuilder = require('./AbstractUriPartBuilder');
const AbstractEncoder = require('./AbstractEncoder');
const AbstractValidator = require('./AbstractValidator');
const AbstractReturnTypeHelper = require('./AbstractReturnTypeHelper');

class DefaultUriPartBuilder extends AbstractUriPartBuilder {
    buildSegment(segmentInfo) { return segmentInfo.getName(); }
    buildQueryOption(option, value) {
        return { name: option, value: Array.isArray(value) ? value.join(',') : value.toString() };
    }
}

class DefaultEncoder extends AbstractEncoder {
    encodeUriLiteral(value) { return value.toString(); }
    encodeQueryOption(name, value) {
        return Array.isArray(value) ? value.map(element => element.toString()) : value.toString();
    }
}

class DefaultValidator extends AbstractValidator {
    validateSegment() { return null; }
    validateParameter() { return null; }
    validateEnd() {}
}

class DefaultReturnTypeHelper extends AbstractReturnTypeHelper {
    getResponseEdmType() { return null; }
    getRequestEdmType() { return null; }
    getResponseRepresentationKind() { return null; }
    getRequestRepresentationKind() { return null; }
}

class ODataUriBuilder {

    /**
     * @param {UriBuilder} uriBuilder
     */
    constructor(uriBuilder) {
        this._uriBuilder = uriBuilder;
        this._uriBuilder.setFormat('string', new StringFormatter());

        /**
         * @type {SegmentInfo[]}
         * @private
         */
        this._pathSegments = [];
        this._queryOptions = new Map();

        this._validator = new DefaultValidator();
        this._encoder = new DefaultEncoder();
        this._partBuilder = new DefaultUriPartBuilder();
        this._returnTypeHelper = new DefaultReturnTypeHelper();
    }

    /**
     * @param {UriResource.ResourceKind} kind
     * @param {string} name
     */
    addPathSegment(kind, name) {
        const segment = new SegmentInfo(kind, name);
        let previousSegment = this.getLastSegment();
        // Special check for a $links support
        if ((kind === ResourceKind.NAVIGATION_TO_ONE || kind === ResourceKind.NAVIGATION_TO_MANY)
            && previousSegment.getKind() === ResourceKind.REF) {
            previousSegment = this.getLastSegment(-1);
        }
        this._validator.validateSegment(previousSegment, segment);
        this._pathSegments.push(segment);
        this._uriBuilder.addPathSegment(this._partBuilder.buildSegment(segment));
    }

    /**
     * @param {SegmentParameter.ParameterKind} kind
     * @param {?string} name
     * @param {*} value
     * @param {EdmPrimitiveType} [type]
     */
    addToSegment(kind, name, value, type) {
        const lastSegment = this.getLastSegment();
        const segmentParameter = new SegmentParameter(kind)
            .setName(name || null)
            .setType(type || null);

        const edmType = this._validator.validateParameter(lastSegment, segmentParameter);
        if (edmType) segmentParameter.setType(edmType);

        segmentParameter.setValue(this._encoder.encodeUriLiteral(value, segmentParameter.getType()));
        lastSegment.addParameter(segmentParameter);
        this._uriBuilder.replaceLastSegment(this._partBuilder.buildSegment(lastSegment));
    }

    addV2FunctionParameter(name, value, type) {
        const lastSegment = this.getLastSegment();
        const segmentParameter = new SegmentParameter(ParameterKind.FUNCTION_PARAMETER);
        segmentParameter.setName(name);
        segmentParameter.setType(type || null);
        const edmType = this._validator.validateParameter(lastSegment, segmentParameter);
        this.setQueryOption(name, this._encoder.encodeUriLiteral(value, edmType || type));
    }

    setQueryOption(name, value) {
        this._queryOptions.set(name, value);
        const encodedValue = this._encoder.encodeQueryOption(name, value);
        const serializedQueryOption = this._partBuilder.buildQueryOption(name, encodedValue);
        this._uriBuilder.setQueryOption(serializedQueryOption.name, serializedQueryOption.value);
    }

    setOrAppendQueryOption(name, value) {
        let queryOptionValues = this._queryOptions.get(name);
        if (!queryOptionValues) {
            queryOptionValues = [value];
        } else {
            queryOptionValues.push(value);
        }
        this.setQueryOption(name, queryOptionValues);
    }

    getQueryOption(name) {
        return this._queryOptions.get(name) || null;
    }

    setEncoder(encoder) {
        this._encoder = encoder;
    }

    setPartBuilder(segmentBuilder) {
        this._partBuilder = segmentBuilder;
    }

    setValidator(validator) {
        this._validator = validator;
    }

    setReturnTypeHelper(returnTypeHelper) {
        this._returnTypeHelper = returnTypeHelper;
    }

    /**
     * @param {?number} offset The offset from the right. So 0 will return the last segment, -1 the second last, etc
     * @return {null|SegmentInfo}
     */
    getLastSegment(offset = 0) {
        const index = (this._pathSegments.length - 1) + offset;
        if (index < 0) return null;
        return this._pathSegments[index];
    }
    /**
     * @returns {string}
     */
    toString() {
        this._validator.validateEnd();
        return this._uriBuilder.to('string');
    }

    /**
     * @return {EdmType}
     */
    getRequestEdmType() {
        return this._returnTypeHelper.getRequestEdmType(this._pathSegments);
    }

    /**
     * @return {EdmType|null}
     */
    getResponseEdmType() {
        return this._returnTypeHelper.getResponseEdmType(this._pathSegments);
    }

    /**
     * Returns the RepresentationKind of the response, a request with this url and the passed HTTP-Method
     * will return (if successful)
     * @param {HttpMethod.Methods} [httpMethod]
     * @returns {RepresentationKind.Kinds}
     */
    getResponseRepresentationKind(httpMethod = HttpMethods.GET) {
        return this._returnTypeHelper.getResponseRepresentationKind(this._pathSegments, httpMethod);
    }

    /**
     * Returns the RepresentationKind of the response, a request with this url and the passed HTTP-Method
     * will return (if successful)
     * @param {HttpMethod.Methods} [httpMethod]
     * @returns {RepresentationKind.Kinds}
     */
    getRequestRepresentationKind(httpMethod = HttpMethods.GET) {
        return this._returnTypeHelper.getRequestRepresentationKind(this._pathSegments, httpMethod);
    }

    /**
     * @param {string} odataVersion
     */
    setOdataVersion(odataVersion) {
        this._odataVersion = odataVersion;
    }

    /**
     * @param {EdmProvider} edmProvider
     */
    setEdm(edmProvider) {
        this._edm = edmProvider;
    }

    /**
     * @return {string}
     */
    getOdataVersion() {
        return this._odataVersion;
    }

    /**
     * @return {EdmProvider}
     */
    getEdm() {
        return this._edm;
    }
}

module.exports = ODataUriBuilder;
