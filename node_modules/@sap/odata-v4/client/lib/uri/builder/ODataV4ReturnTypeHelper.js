'use strict';
const AbstractReturnTypeHelper = require('./AbstractReturnTypeHelper');
const RepresentationKind = require('../../../../lib/format/RepresentationKind');
const ResourceKind = require('../../../../lib/uri/UriResource').ResourceKind;

class ODataV4ReturnTypeHelper extends AbstractReturnTypeHelper {

    /**
     * @inheritDoc
     * @return {RepresentationKind.Kinds}
     */
    getResponseRepresentationKind(segments, httpMethod) {

        if (httpMethod && (httpMethod.toLocaleLowerCase() === 'options' || httpMethod.toLocaleLowerCase() === 'head')) {
            return RepresentationKind.Kinds.NO_CONTENT;
        }

        const uriInfo = {
            getLastSegment: () => segments[segments.length - 1],
            getFinalEdmType: () => this.getFinalEdmType(segments)
        };
        return RepresentationKind.getResponseRepresentationKind(uriInfo, httpMethod);
    }

    /**
     * @inheritDoc
     * @return {RepresentationKind.Kinds}
     */
    getRequestRepresentationKind(segments, httpMethod) {
        const uriInfo = {
            getLastSegment: () => segments[segments.length - 1],
            getFinalEdmType: () => this.getFinalEdmType(segments)
        };
        return RepresentationKind.getRequestRepresentationKind(uriInfo, httpMethod);
    }


    getRequestEdmType(segments) {
        const lastSegment = segments[segments.length - 1];
        const lastSegmentKind = lastSegment.getKind();
        if (lastSegmentKind === ResourceKind.ACTION_IMPORT || lastSegmentKind === ResourceKind.BOUND_ACTION) {
            const action = lastSegment.getEdmOperation();
            const parameters = new Map(action.getParameters());
            if (action.isBound()) parameters.delete(parameters.keys().next().value);
            const types = {};
            for (const [parameterName, edmParameter] of parameters.entries()) {
                types[parameterName] = edmParameter.getType();
            }
            return types;
        }
        return this.getFinalEdmArtifact(segments);
    }

    getResponseEdmType(segments) {
        return this.getFinalEdmArtifact(segments);
    }

}

module.exports = ODataV4ReturnTypeHelper;
