const _valOf = (user) => {
  return () => {
    return user.id
  }
}

const _is = (user, attr) => {
  return (role) => {
    if (role === 'any') {
      return true
    }

    if (!attr) {
      return false
    }

    if (role === 'authenticated-user') {
      return attr.scopes.includes('openid')
    }

    const xsappname = attr.xsappname
    for (const scope of attr.scopes) {
      if (role === scope || `${xsappname}.${role}` === scope) {
        return true
      }
    }

    return false
  }
}

const _has = (user) => {
  return (roles) => {
    let hasRoles = true
    roles.forEach((role) => {
      if (!user.is(role)) {
        hasRoles = false
      }
    })

    return hasRoles
  }
}

const _addProxyFunctions = (req) => {
  req.attr = req.authInfo
  req.user.valueOf = _valOf(req.user)
  req.user.is = _is(req.user, req.attr)
  req.user.has = _has(req.user)
}

const postAuth = (req, res, next) => {
  _addProxyFunctions(req)

  next()
}

module.exports = {
  postAuth
}
