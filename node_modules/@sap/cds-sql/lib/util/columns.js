const {typeConversionMap} = require('./dataTypes')
const cdsDataTypes = [...typeConversionMap.keys()]

const _buildColumn = (name, type, value, key) => {
  const column = {name: name, type: type, value: value}
  if (key) {
    column.key = true
  }
  return column
}

const _customType = (reflected, type) => {
  const newType = reflected.definitions[type].type
  return cdsDataTypes.includes(newType) ? newType : _customType(reflected, newType)
}

/**
 * This method gets all columns for an entity.
 * It includes the generated foreign keys from managed associations, structured elements and complex and custom types.
 *
 * @param reflected - the reflected model
 * @param entity - the csn entity
 * @returns {Array} - array of columns
 */
const getColumns = (reflected, entity, prefix) => {
  let columns = []
  for (const key of Object.keys(entity.elements)) {
    const column = entity.elements[key]
    let name = column.name
    if (prefix) {
      // prefix is used in complex types and struct elements
      name = `${prefix}_${column.name}`
    }

    if (cdsDataTypes.includes(column.type)) {
      // simple column
      columns.push(_buildColumn(name, column.type, column.value, column.key))
    } else if (column.type === 'cds.Association' && column.foreignKeys) {
      // managed association
      Object.keys(column.foreignKeys).forEach((key) => {
        columns.push(_buildColumn(`${name}_${key}`, reflected.definitions[column.target].elements[key].type, undefined, column.key))
      })
    } else if (column.elements) {
      // structured elements
      columns.push(...getColumns(reflected, column, `${name}`))
    } else if (reflected.definitions[column.type]) {
      if (reflected.definitions[column.type].elements) {
        // handle complex type
        columns.push(...getColumns(reflected, reflected.definitions[column.type], name))
      } else {
        // custom type
        columns.push(_buildColumn(name, _customType(reflected, column.type), undefined, column.key))
      }
    }
  }

  return columns
}

module.exports = {getColumns}
